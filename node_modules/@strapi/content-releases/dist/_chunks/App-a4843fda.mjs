import { jsxs, jsx, Fragment } from "react/jsx-runtime";
import { useParams, useHistory, Redirect, Link as Link$1, useLocation, Switch, Route } from "react-router-dom";
import { P as PERMISSIONS, u as useGetReleaseQuery, a as useUpdateReleaseMutation, b as useDeleteReleaseMutation, c as usePublishReleaseMutation, d as useGetReleaseActionsQuery, e as useUpdateReleaseActionMutation, R as ReleaseActionOptions, i as isAxiosError, f as useGetReleasesQuery, g as useCreateReleaseMutation, p as pluginId } from "./index-937f8179.mjs";
import * as React from "react";
import { ModalLayout, ModalHeader, Typography, ModalBody, TextInput, ModalFooter, Button, Flex, ContentLayout, Main, HeaderLayout, Link, IconButton, Popover, Tr, Td, TabGroup, Box, Tabs, Tab, Divider, TabPanels, TabPanel, EmptyStateLayout, Grid, GridItem } from "@strapi/design-system";
import { LinkButton, Link as Link$2 } from "@strapi/design-system/v2";
import { CheckPermissions, useNotification, useAPIErrorHandler, LoadingIndicatorPage, ConfirmDialog, useRBAC, RelativeTime, useQueryParams, NoContent, Table, PageSizeURLQuery, PaginationURLQuery, AnErrorOccurred } from "@strapi/helper-plugin";
import { Pencil, Trash, ArrowLeft, More, Plus, EmptyDocuments } from "@strapi/icons";
import { useIntl } from "react-intl";
import styled from "styled-components";
import { Formik, Form } from "formik";
import * as yup from "yup";
import "@reduxjs/toolkit/query";
import "axios";
import "@reduxjs/toolkit/query/react";
const RELEASE_SCHEMA = yup.object().shape({
  name: yup.string().trim().required()
}).required().noUnknown();
const ReleaseModal = ({
  handleClose,
  handleSubmit,
  initialValues,
  isLoading = false
}) => {
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsxs(ModalLayout, { onClose: handleClose, labelledBy: "title", children: [
    /* @__PURE__ */ jsx(ModalHeader, { children: /* @__PURE__ */ jsx(Typography, { id: "title", fontWeight: "bold", textColor: "neutral800", children: formatMessage({
      id: "content-releases.modal.add-release-title",
      defaultMessage: "New release"
    }) }) }),
    /* @__PURE__ */ jsx(
      Formik,
      {
        validateOnChange: false,
        onSubmit: handleSubmit,
        initialValues,
        validationSchema: RELEASE_SCHEMA,
        children: ({ values, errors, handleChange }) => /* @__PURE__ */ jsxs(Form, { children: [
          /* @__PURE__ */ jsx(ModalBody, { children: /* @__PURE__ */ jsx(
            TextInput,
            {
              label: formatMessage({
                id: "content-releases.modal.form.input.label.release-name",
                defaultMessage: "Name"
              }),
              name: "name",
              value: values.name,
              error: errors.name,
              onChange: handleChange,
              required: true
            }
          ) }),
          /* @__PURE__ */ jsx(
            ModalFooter,
            {
              startActions: /* @__PURE__ */ jsx(Button, { onClick: handleClose, variant: "tertiary", name: "cancel", children: formatMessage({ id: "cancel", defaultMessage: "Cancel" }) }),
              endActions: /* @__PURE__ */ jsx(Button, { name: "submit", loading: isLoading, disabled: !values.name, type: "submit", children: formatMessage({
                id: "content-releases.modal.form.button.submit",
                defaultMessage: "Continue"
              }) })
            }
          )
        ] })
      }
    )
  ] });
};
const ReleaseInfoWrapper = styled(Flex)`
  align-self: stretch;
  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};
  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};
  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
const StyledFlex = styled(Flex)`
  align-self: stretch;
  cursor: ${({ disabled }) => disabled ? "not-allowed" : "pointer"};

  svg path {
    fill: ${({ theme, disabled }) => disabled && theme.colors.neutral500};
  }
  span {
    color: ${({ theme, disabled }) => disabled && theme.colors.neutral500};
  }
`;
const PencilIcon = styled(Pencil)`
  width: ${({ theme }) => theme.spaces[4]};
  height: ${({ theme }) => theme.spaces[4]};
  path {
    fill: ${({ theme }) => theme.colors.neutral600};
  }
`;
const TrashIcon = styled(Trash)`
  width: ${({ theme }) => theme.spaces[4]};
  height: ${({ theme }) => theme.spaces[4]};
  path {
    fill: ${({ theme }) => theme.colors.danger600};
  }
`;
const PopoverButton = ({ onClick, disabled, children }) => {
  return /* @__PURE__ */ jsx(
    StyledFlex,
    {
      paddingTop: 2,
      paddingBottom: 2,
      paddingLeft: 4,
      paddingRight: 4,
      alignItems: "center",
      gap: 2,
      as: "button",
      hasRadius: true,
      onClick,
      disabled,
      children
    }
  );
};
const ReleaseDetailsLayout = ({
  toggleEditReleaseModal,
  toggleWarningSubmit,
  children
}) => {
  const { formatMessage } = useIntl();
  const { releaseId } = useParams();
  const [isPopoverVisible, setIsPopoverVisible] = React.useState(false);
  const moreButtonRef = React.useRef(null);
  const {
    data,
    isLoading: isLoadingDetails,
    isError,
    error
  } = useGetReleaseQuery({ id: releaseId });
  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();
  const toggleNotification = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const {
    allowedActions: { canUpdate, canDelete }
  } = useRBAC(PERMISSIONS);
  const release = data?.data;
  const handleTogglePopover = () => {
    setIsPopoverVisible((prev) => !prev);
  };
  const openReleaseModal = () => {
    toggleEditReleaseModal();
    handleTogglePopover();
  };
  const handlePublishRelease = async () => {
    const response = await publishRelease({ id: releaseId });
    if ("data" in response) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.pages.ReleaseDetails.publish-notification-success",
          defaultMessage: "Release was published successfully."
        })
      });
    } else if (isAxiosError(response.error)) {
      toggleNotification({
        type: "warning",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "warning",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  const openWarningConfirmDialog = () => {
    toggleWarningSubmit();
    handleTogglePopover();
  };
  if (isLoadingDetails) {
    return /* @__PURE__ */ jsx(Main, { "aria-busy": isLoadingDetails, children: /* @__PURE__ */ jsx(LoadingIndicatorPage, {}) });
  }
  if (isError || !release) {
    return /* @__PURE__ */ jsx(
      Redirect,
      {
        to: {
          pathname: "/plugins/content-releases",
          state: {
            errors: [
              {
                code: error?.code
              }
            ]
          }
        }
      }
    );
  }
  const totalEntries = release.actions.meta.count || 0;
  const createdBy = `${release.createdBy.firstname} ${release.createdBy.lastname}`;
  return /* @__PURE__ */ jsxs(Main, { "aria-busy": isLoadingDetails, children: [
    /* @__PURE__ */ jsx(
      HeaderLayout,
      {
        title: release.name,
        subtitle: formatMessage(
          {
            id: "content-releases.pages.Details.header-subtitle",
            defaultMessage: "{number, plural, =0 {No entries} one {# entry} other {# entries}}"
          },
          { number: totalEntries }
        ),
        navigationAction: /* @__PURE__ */ jsx(Link, { startIcon: /* @__PURE__ */ jsx(ArrowLeft, {}), to: "/plugins/content-releases", children: formatMessage({
          id: "global.back",
          defaultMessage: "Back"
        }) }),
        primaryAction: !release.releasedAt && /* @__PURE__ */ jsxs(Flex, { gap: 2, children: [
          /* @__PURE__ */ jsx(
            IconButton,
            {
              label: formatMessage({
                id: "content-releases.header.actions.open-release-actions",
                defaultMessage: "Release actions"
              }),
              ref: moreButtonRef,
              onClick: handleTogglePopover,
              children: /* @__PURE__ */ jsx(More, {})
            }
          ),
          isPopoverVisible && /* @__PURE__ */ jsxs(
            Popover,
            {
              source: moreButtonRef,
              placement: "bottom-end",
              onDismiss: handleTogglePopover,
              spacing: 4,
              minWidth: "242px",
              children: [
                /* @__PURE__ */ jsxs(Flex, { alignItems: "center", justifyContent: "center", direction: "column", padding: 1, children: [
                  /* @__PURE__ */ jsxs(PopoverButton, { disabled: !canUpdate, onClick: openReleaseModal, children: [
                    /* @__PURE__ */ jsx(PencilIcon, {}),
                    /* @__PURE__ */ jsx(Typography, { ellipsis: true, children: formatMessage({
                      id: "content-releases.header.actions.edit",
                      defaultMessage: "Edit"
                    }) })
                  ] }),
                  /* @__PURE__ */ jsxs(PopoverButton, { disabled: !canDelete, onClick: openWarningConfirmDialog, children: [
                    /* @__PURE__ */ jsx(TrashIcon, {}),
                    /* @__PURE__ */ jsx(Typography, { ellipsis: true, textColor: "danger600", children: formatMessage({
                      id: "content-releases.header.actions.delete",
                      defaultMessage: "Delete"
                    }) })
                  ] })
                ] }),
                /* @__PURE__ */ jsxs(
                  ReleaseInfoWrapper,
                  {
                    direction: "column",
                    justifyContent: "center",
                    alignItems: "flex-start",
                    gap: 1,
                    padding: 5,
                    children: [
                      /* @__PURE__ */ jsx(Typography, { variant: "pi", fontWeight: "bold", children: formatMessage({
                        id: "content-releases.header.actions.created",
                        defaultMessage: "Created"
                      }) }),
                      /* @__PURE__ */ jsxs(Typography, { variant: "pi", color: "neutral300", children: [
                        /* @__PURE__ */ jsx(RelativeTime, { timestamp: new Date(release.createdAt) }),
                        formatMessage(
                          {
                            id: "content-releases.header.actions.created.description",
                            defaultMessage: " by {createdBy}"
                          },
                          { createdBy }
                        )
                      ] })
                    ]
                  }
                )
              ]
            }
          ),
          /* @__PURE__ */ jsx(CheckPermissions, { permissions: PERMISSIONS.publish, children: /* @__PURE__ */ jsx(
            Button,
            {
              size: "S",
              variant: "default",
              onClick: handlePublishRelease,
              loading: isPublishing,
              disabled: release.actions.meta.count === 0,
              children: formatMessage({
                id: "content-releases.header.actions.publish",
                defaultMessage: "Publish"
              })
            }
          ) })
        ] })
      }
    ),
    children
  ] });
};
const ReleaseDetailsBody = () => {
  const { formatMessage } = useIntl();
  const { releaseId } = useParams();
  const [{ query }] = useQueryParams();
  const toggleNotification = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const {
    data: releaseData,
    isLoading: isReleaseLoading,
    isError: isReleaseError,
    error: releaseError
  } = useGetReleaseQuery({ id: releaseId });
  const release = releaseData?.data;
  const {
    isLoading,
    isFetching,
    isError,
    data,
    error: releaseActionsError
  } = useGetReleaseActionsQuery({
    ...query,
    releaseId
  });
  const [updateReleaseAction] = useUpdateReleaseActionMutation();
  const handleChangeType = async (e, actionId) => {
    const response = await updateReleaseAction({
      params: {
        releaseId,
        actionId
      },
      body: {
        type: e.target.value
      }
    });
    if ("error" in response) {
      if (isAxiosError(response.error)) {
        toggleNotification({
          type: "warning",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "warning",
          message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
        });
      }
    }
  };
  if (isLoading || isReleaseLoading) {
    return /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsx(LoadingIndicatorPage, {}) });
  }
  if (isError || isReleaseError || !release) {
    const errorsArray = [];
    if (releaseError) {
      errorsArray.push({
        code: releaseError.code
      });
    }
    if (releaseActionsError) {
      errorsArray.push({
        code: releaseActionsError.code
      });
    }
    return /* @__PURE__ */ jsx(
      Redirect,
      {
        to: {
          pathname: "/plugins/content-releases",
          state: {
            errors: errorsArray
          }
        }
      }
    );
  }
  const releaseActions = data?.data;
  const releaseMeta = data?.meta;
  if (!releaseActions || !releaseActions.length) {
    return /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsx(
      NoContent,
      {
        content: {
          id: "content-releases.pages.Details.tab.emptyEntries",
          defaultMessage: "This release is empty. Open the Content Manager, select an entry and add it to the release."
        },
        action: /* @__PURE__ */ jsx(
          LinkButton,
          {
            as: Link$1,
            to: {
              pathname: "/content-manager"
            },
            style: { textDecoration: "none" },
            variant: "secondary",
            children: formatMessage({
              id: "content-releases.page.Details.button.openContentManager",
              defaultMessage: "Open the Content Manager"
            })
          }
        )
      }
    ) });
  }
  return /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsxs(Flex, { gap: 4, direction: "column", alignItems: "stretch", children: [
    /* @__PURE__ */ jsx(
      Table.Root,
      {
        rows: releaseActions.map((item) => ({
          ...item,
          id: Number(item.entry.id)
        })),
        colCount: releaseActions.length,
        isLoading,
        isFetching,
        children: /* @__PURE__ */ jsxs(Table.Content, { children: [
          /* @__PURE__ */ jsxs(Table.Head, { children: [
            /* @__PURE__ */ jsx(
              Table.HeaderCell,
              {
                fieldSchemaType: "string",
                label: formatMessage({
                  id: "content-releases.page.ReleaseDetails.table.header.label.name",
                  defaultMessage: "name"
                }),
                name: "name"
              }
            ),
            /* @__PURE__ */ jsx(
              Table.HeaderCell,
              {
                fieldSchemaType: "string",
                label: formatMessage({
                  id: "content-releases.page.ReleaseDetails.table.header.label.locale",
                  defaultMessage: "locale"
                }),
                name: "locale"
              }
            ),
            /* @__PURE__ */ jsx(
              Table.HeaderCell,
              {
                fieldSchemaType: "string",
                label: formatMessage({
                  id: "content-releases.page.ReleaseDetails.table.header.label.content-type",
                  defaultMessage: "content-type"
                }),
                name: "content-type"
              }
            ),
            /* @__PURE__ */ jsx(
              Table.HeaderCell,
              {
                fieldSchemaType: "string",
                label: formatMessage({
                  id: "content-releases.page.ReleaseDetails.table.header.label.action",
                  defaultMessage: "action"
                }),
                name: "action"
              }
            )
          ] }),
          /* @__PURE__ */ jsx(Table.LoadingBody, {}),
          /* @__PURE__ */ jsx(Table.Body, { children: releaseActions.map(({ id, type, entry }) => /* @__PURE__ */ jsxs(Tr, { children: [
            /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { children: `${entry.contentType.mainFieldValue || entry.id}` }) }),
            /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { children: `${entry?.locale?.name ? entry.locale.name : "-"}` }) }),
            /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { children: entry.contentType.displayName || "" }) }),
            /* @__PURE__ */ jsx(Td, { children: release.releasedAt ? /* @__PURE__ */ jsx(Typography, { children: formatMessage(
              {
                id: "content-releases.page.ReleaseDetails.table.action-published",
                defaultMessage: "This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>."
              },
              {
                isPublish: type === "publish",
                b: (children) => /* @__PURE__ */ jsx(Typography, { fontWeight: "bold", children })
              }
            ) }) : /* @__PURE__ */ jsx(
              ReleaseActionOptions,
              {
                selected: type,
                handleChange: (e) => handleChangeType(e, id),
                name: `release-action-${id}-type`
              }
            ) })
          ] }, id)) })
        ] })
      }
    ),
    /* @__PURE__ */ jsxs(Flex, { paddingTop: 4, alignItems: "flex-end", justifyContent: "space-between", children: [
      /* @__PURE__ */ jsx(PageSizeURLQuery, { defaultValue: releaseMeta?.pagination?.pageSize.toString() }),
      /* @__PURE__ */ jsx(
        PaginationURLQuery,
        {
          pagination: {
            pageCount: releaseMeta?.pagination?.pageCount || 0
          }
        }
      )
    ] })
  ] }) });
};
const ReleaseDetailsPage = () => {
  const { formatMessage } = useIntl();
  const { releaseId } = useParams();
  const toggleNotification = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { push } = useHistory();
  const [releaseModalShown, setReleaseModalShown] = React.useState(false);
  const [showWarningSubmit, setWarningSubmit] = React.useState(false);
  const {
    isLoading: isLoadingDetails,
    data,
    isSuccess: isSuccessDetails
  } = useGetReleaseQuery({ id: releaseId });
  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();
  const [deleteRelease, { isLoading: isDeletingRelease }] = useDeleteReleaseMutation();
  const toggleEditReleaseModal = () => {
    setReleaseModalShown((prev) => !prev);
  };
  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);
  if (isLoadingDetails) {
    return /* @__PURE__ */ jsx(
      ReleaseDetailsLayout,
      {
        toggleEditReleaseModal,
        toggleWarningSubmit,
        children: /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsx(LoadingIndicatorPage, {}) })
      }
    );
  }
  const title = isSuccessDetails && data?.data?.name || "";
  const handleEditRelease = async (values) => {
    const response = await updateRelease({
      id: releaseId,
      name: values.name
    });
    if ("data" in response) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.modal.release-updated-notification-success",
          defaultMessage: "Release updated."
        })
      });
    } else if (isAxiosError(response.error)) {
      toggleNotification({
        type: "warning",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "warning",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
    toggleEditReleaseModal();
  };
  const handleDeleteRelease = async () => {
    const response = await deleteRelease({
      id: releaseId
    });
    if ("data" in response) {
      push("/plugins/content-releases");
    } else if (isAxiosError(response.error)) {
      toggleNotification({
        type: "warning",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "warning",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  return /* @__PURE__ */ jsxs(
    ReleaseDetailsLayout,
    {
      toggleEditReleaseModal,
      toggleWarningSubmit,
      children: [
        /* @__PURE__ */ jsx(ReleaseDetailsBody, {}),
        releaseModalShown && /* @__PURE__ */ jsx(
          ReleaseModal,
          {
            handleClose: toggleEditReleaseModal,
            handleSubmit: handleEditRelease,
            isLoading: isLoadingDetails || isSubmittingForm,
            initialValues: { name: title || "" }
          }
        ),
        /* @__PURE__ */ jsx(
          ConfirmDialog,
          {
            bodyText: {
              id: "content-releases.dialog.confirmation-message",
              defaultMessage: "Are you sure you want to delete this release?"
            },
            isOpen: showWarningSubmit,
            isConfirmButtonLoading: isDeletingRelease,
            onToggleDialog: toggleWarningSubmit,
            onConfirm: handleDeleteRelease
          }
        )
      ]
    }
  );
};
const ProtectedReleaseDetailsPage = () => /* @__PURE__ */ jsx(CheckPermissions, { permissions: PERMISSIONS.main, children: /* @__PURE__ */ jsx(ReleaseDetailsPage, {}) });
const ReleasesLayout = ({
  isLoading,
  totalReleases,
  onClickAddRelease,
  children
}) => {
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsxs(Main, { "aria-busy": isLoading, children: [
    /* @__PURE__ */ jsx(
      HeaderLayout,
      {
        title: formatMessage({
          id: "content-releases.pages.Releases.title",
          defaultMessage: "Releases"
        }),
        subtitle: !isLoading && formatMessage(
          {
            id: "content-releases.pages.Releases.header-subtitle",
            defaultMessage: "{number, plural, =0 {No releases} one {# release} other {# releases}}"
          },
          { number: totalReleases }
        ),
        primaryAction: /* @__PURE__ */ jsx(CheckPermissions, { permissions: PERMISSIONS.create, children: /* @__PURE__ */ jsx(Button, { startIcon: /* @__PURE__ */ jsx(Plus, {}), onClick: onClickAddRelease, children: formatMessage({
          id: "content-releases.header.actions.add-release",
          defaultMessage: "New release"
        }) }) })
      }
    ),
    children
  ] });
};
const LinkCard = styled(Link$2)`
  display: block;
`;
const ReleasesGrid = ({ sectionTitle, releases = [], isError = false }) => {
  const { formatMessage } = useIntl();
  if (isError) {
    return /* @__PURE__ */ jsx(AnErrorOccurred, {});
  }
  if (releases?.length === 0) {
    return /* @__PURE__ */ jsx(
      EmptyStateLayout,
      {
        content: formatMessage(
          {
            id: "content-releases.page.Releases.tab.emptyEntries",
            defaultMessage: "No releases"
          },
          {
            target: sectionTitle
          }
        ),
        icon: /* @__PURE__ */ jsx(EmptyDocuments, { width: "10rem" })
      }
    );
  }
  return /* @__PURE__ */ jsx(Grid, { gap: 4, children: releases.map(({ id, name, actions }) => /* @__PURE__ */ jsx(GridItem, { col: 3, s: 6, xs: 12, children: /* @__PURE__ */ jsx(LinkCard, { href: `content-releases/${id}`, isExternal: false, children: /* @__PURE__ */ jsxs(
    Flex,
    {
      direction: "column",
      justifyContent: "space-between",
      padding: 4,
      hasRadius: true,
      background: "neutral0",
      shadow: "tableShadow",
      height: "100%",
      width: "100%",
      alignItems: "start",
      gap: 2,
      children: [
        /* @__PURE__ */ jsx(Typography, { as: "h3", variant: "delta", fontWeight: "bold", children: name }),
        /* @__PURE__ */ jsx(Typography, { variant: "pi", children: formatMessage(
          {
            id: "content-releases.page.Releases.release-item.entries",
            defaultMessage: "{number, plural, =0 {No entries} one {# entry} other {# entries}}"
          },
          { number: actions.meta.count }
        ) })
      ]
    }
  ) }) }, id)) });
};
const INITIAL_FORM_VALUES = {
  name: ""
};
const ReleasesPage = () => {
  const location = useLocation();
  const [releaseModalShown, setReleaseModalShown] = React.useState(false);
  const toggleNotification = useNotification();
  const { formatMessage } = useIntl();
  const { push, replace } = useHistory();
  const { formatAPIError } = useAPIErrorHandler();
  const [{ query }, setQuery] = useQueryParams();
  const response = useGetReleasesQuery(query);
  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();
  const { isLoading, isSuccess, isError } = response;
  React.useEffect(() => {
    if (location?.state?.errors) {
      toggleNotification({
        type: "warning",
        title: formatMessage({
          id: "content-releases.pages.Releases.notification.error.title",
          defaultMessage: "Your request could not be processed."
        }),
        message: formatMessage({
          id: "content-releases.pages.Releases.notification.error.message",
          defaultMessage: "Please try again or open another release."
        })
      });
      replace({ state: null });
    }
  }, [formatMessage, location?.state?.errors, replace, toggleNotification]);
  const toggleAddReleaseModal = () => {
    setReleaseModalShown((prev) => !prev);
  };
  if (isLoading) {
    return /* @__PURE__ */ jsx(ReleasesLayout, { onClickAddRelease: toggleAddReleaseModal, isLoading: true, children: /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsx(LoadingIndicatorPage, {}) }) });
  }
  const totalReleases = isSuccess && response.currentData?.meta?.pagination?.total || 0;
  const handleTabChange = (index) => {
    setQuery({
      ...query,
      page: 1,
      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,
      filters: {
        releasedAt: {
          $notNull: index === 0 ? false : true
        }
      }
    });
  };
  const activeTab = response?.currentData?.meta?.activeTab || "pending";
  const handleAddRelease = async (values) => {
    const response2 = await createRelease({
      name: values.name
    });
    if ("data" in response2) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.modal.release-created-notification-success",
          defaultMessage: "Release created."
        })
      });
      push(`/plugins/content-releases/${response2.data.data.id}`);
    } else if (isAxiosError(response2.error)) {
      toggleNotification({
        type: "warning",
        message: formatAPIError(response2.error)
      });
    } else {
      toggleNotification({
        type: "warning",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  return /* @__PURE__ */ jsxs(ReleasesLayout, { onClickAddRelease: toggleAddReleaseModal, totalReleases, children: [
    /* @__PURE__ */ jsx(ContentLayout, { children: /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsxs(
        TabGroup,
        {
          label: formatMessage({
            id: "content-releases.pages.Releases.tab-group.label",
            defaultMessage: "Releases list"
          }),
          variant: "simple",
          initialSelectedTabIndex: ["pending", "done"].indexOf(activeTab),
          onTabChange: handleTabChange,
          children: [
            /* @__PURE__ */ jsxs(Box, { paddingBottom: 8, children: [
              /* @__PURE__ */ jsxs(Tabs, { children: [
                /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                  id: "content-releases.pages.Releases.tab.pending",
                  defaultMessage: "Pending"
                }) }),
                /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                  id: "content-releases.pages.Releases.tab.done",
                  defaultMessage: "Done"
                }) })
              ] }),
              /* @__PURE__ */ jsx(Divider, {})
            ] }),
            /* @__PURE__ */ jsxs(TabPanels, { children: [
              /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(
                ReleasesGrid,
                {
                  sectionTitle: "pending",
                  releases: response?.currentData?.data,
                  isError
                }
              ) }),
              /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(
                ReleasesGrid,
                {
                  sectionTitle: "done",
                  releases: response?.currentData?.data,
                  isError
                }
              ) })
            ] })
          ]
        }
      ),
      totalReleases > 0 && /* @__PURE__ */ jsxs(Flex, { paddingTop: 4, alignItems: "flex-end", justifyContent: "space-between", children: [
        /* @__PURE__ */ jsx(
          PageSizeURLQuery,
          {
            options: ["8", "16", "32", "64"],
            defaultValue: response?.currentData?.meta?.pagination?.pageSize.toString()
          }
        ),
        /* @__PURE__ */ jsx(
          PaginationURLQuery,
          {
            pagination: {
              pageCount: response?.currentData?.meta?.pagination?.pageCount || 0
            }
          }
        )
      ] })
    ] }) }),
    releaseModalShown && /* @__PURE__ */ jsx(
      ReleaseModal,
      {
        handleClose: toggleAddReleaseModal,
        handleSubmit: handleAddRelease,
        isLoading: isSubmittingForm,
        initialValues: INITIAL_FORM_VALUES
      }
    )
  ] });
};
const ProtectedReleasesPage = () => /* @__PURE__ */ jsx(CheckPermissions, { permissions: PERMISSIONS.main, children: /* @__PURE__ */ jsx(ReleasesPage, {}) });
const App = () => {
  return /* @__PURE__ */ jsxs(Switch, { children: [
    /* @__PURE__ */ jsx(Route, { exact: true, path: `/plugins/${pluginId}`, component: ProtectedReleasesPage }),
    /* @__PURE__ */ jsx(
      Route,
      {
        exact: true,
        path: `/plugins/${pluginId}/:releaseId`,
        component: ProtectedReleaseDetailsPage
      }
    )
  ] });
};
export {
  App
};
//# sourceMappingURL=App-a4843fda.mjs.map
