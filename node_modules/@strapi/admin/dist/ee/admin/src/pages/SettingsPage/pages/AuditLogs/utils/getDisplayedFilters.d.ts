import { IntlShape } from 'react-intl';
import { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';
export declare const getDisplayedFilters: ({ formatMessage, users, canReadUsers, }: {
    formatMessage: IntlShape['formatMessage'];
    users: SanitizedAdminUser[];
    canReadUsers: boolean;
}) => ({
    name: string;
    metadatas: {
        customOperators: {
            intlLabel: {
                id: string;
                defaultMessage: string;
            };
            value: string;
        }[];
        label: string;
        customInput: ({ value, options, onChange }?: {
            value?: string | undefined;
            options?: {
                label: string;
                customValue: string;
            }[] | undefined;
            onChange?: ((value?: string | undefined) => void) | undefined;
        }) => import("react/jsx-runtime").JSX.Element;
        options: {
            label: string;
            customValue: "entry.create" | "entry.update" | "entry.delete" | "entry.publish" | "entry.unpublish" | "media.create" | "media.update" | "media.delete" | "media-folder.create" | "media-folder.update" | "media-folder.delete" | "user.create" | "user.update" | "user.delete" | "admin.auth.success" | "admin.logout" | "content-type.create" | "content-type.update" | "content-type.delete" | "component.create" | "component.update" | "component.delete" | "role.create" | "role.update" | "role.delete" | "permission.create" | "permission.update" | "permission.delete";
        }[];
    };
    fieldSchema: {
        type: string;
    };
} | {
    name: string;
    metadatas: {
        label: string;
        customOperators?: undefined;
        customInput?: undefined;
        options?: undefined;
    };
    fieldSchema: {
        type: string;
    };
} | {
    name: string;
    metadatas: {
        customOperators: {
            intlLabel: {
                id: string;
                defaultMessage: string;
            };
            value: string;
        }[];
        label: string;
        options: {
            label: string | undefined;
            customValue: string;
        }[];
        customInput: ({ value, options, onChange }?: {
            value?: string | undefined;
            options?: {
                label: string;
                customValue: string;
            }[] | undefined;
            onChange?: ((value?: string | undefined) => void) | undefined;
        }) => import("react/jsx-runtime").JSX.Element;
    };
    fieldSchema: {
        type: string;
        mainField: {
            name: string;
        };
    };
})[];
