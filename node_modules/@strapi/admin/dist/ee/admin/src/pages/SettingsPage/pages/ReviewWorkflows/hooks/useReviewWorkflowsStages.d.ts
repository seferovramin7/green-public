import { UseQueryOptions } from 'react-query';
import type { Contracts } from '@strapi/plugin-content-manager/_internal/shared';
import type { Entity, Schema } from '@strapi/types';
interface UseReviewWorkflowStagesArgs {
    id: Entity.ID;
    layout: Schema.ContentType;
}
export declare function useReviewWorkflowsStages({ id, layout }: UseReviewWorkflowStagesArgs, queryOptions?: Omit<UseQueryOptions<Contracts.ReviewWorkflows.GetStages.Response>, 'queryKey' | 'queryFn'>): {
    meta: {
        workflowCount: number;
    };
    stages: Contracts.ReviewWorkflows.Stage[];
    isLoading: boolean;
    refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Contracts.ReviewWorkflows.GetStages.Response, unknown>>;
};
export {};
