{"version":3,"file":"ListPage-7304822d.js","sources":["../../admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx","../../admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx","../../admin/src/pages/Settings/pages/Users/components/TableRows.tsx","../../admin/src/pages/Settings/pages/Users/ListPage.tsx"],"sourcesContent":["import { Button, ButtonProps } from '@strapi/design-system';\nimport { Envelop } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\n\nconst CreateActionCE = ({ onClick }: CreateActionCEProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Button onClick={onClick} startIcon={<Envelop />} size=\"S\">\n      {formatMessage({\n        id: 'Settings.permissions.users.create',\n        defaultMessage: 'Invite new user',\n      })}\n    </Button>\n  );\n};\n\nexport { CreateActionCE };\nexport type { CreateActionCEProps };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  GridItem,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Typography,\n} from '@strapi/design-system';\nimport { Breadcrumbs, Crumb } from '@strapi/design-system/v2';\nimport {\n  Form,\n  GenericInput,\n  useFetchClient,\n  useNotification,\n  useOverlayBlocker,\n  translatedErrors,\n  useAPIErrorHandler,\n} from '@strapi/helper-plugin';\nimport { Entity } from '@strapi/types';\nimport { AxiosError, AxiosResponse } from 'axios';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\nimport * as yup from 'yup';\n\nimport { Create } from '../../../../../../../shared/contracts/user';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\nimport { FormLayout } from '../../../../../types/form';\n\nimport { MagicLinkCE } from './MagicLinkCE';\nimport { SelectRoles } from './SelectRoles';\n\ninterface ModalFormProps {\n  onSuccess: () => Promise<void>;\n  onToggle: () => void;\n}\n\nconst ModalForm = ({ onSuccess, onToggle }: ModalFormProps) => {\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [registrationToken, setRegistrationToken] = React.useState('');\n  const { formatMessage } = useIntl();\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { post } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const roleLayout = useEnterprise(\n    ROLE_LAYOUT,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).ROLE_LAYOUT,\n    {\n      combine(ceRoles, eeRoles) {\n        return [...ceRoles, ...eeRoles];\n      },\n\n      defaultValue: [],\n    }\n  );\n\n  const initialValues = useEnterprise<InitialData>(\n    FORM_INITIAL_VALUES,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).FORM_INITIAL_VALUES,\n    {\n      combine(ceValues, eeValues) {\n        return {\n          ...ceValues,\n          ...eeValues,\n        };\n      },\n\n      defaultValue: FORM_INITIAL_VALUES,\n    }\n  );\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n  const postMutation = useMutation<\n    AxiosResponse<Create.Response>,\n    AxiosError<Required<Create.Response>>,\n    Pick<Create.Request['body'], 'email' | 'firstname' | 'lastname' | 'roles'>\n  >(\n    (body) =>\n      post<Create.Response, AxiosResponse<Create.Response>, Create.Request['body']>(\n        '/admin/users',\n        body\n      ),\n    {\n      onMutate() {\n        if (lockApp) {\n          lockApp();\n        }\n\n        setIsSubmitting(true);\n      },\n      async onSuccess({ data: { data } }) {\n        if (data.registrationToken) {\n          setRegistrationToken(data.registrationToken);\n          await onSuccess();\n\n          goNext();\n        } else {\n          toggleNotification({\n            type: 'warning',\n            message: { id: 'notification.error', defaultMessage: 'An error occured' },\n          });\n        }\n      },\n      onError(err) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(err),\n        });\n\n        throw err;\n      },\n      onSettled() {\n        if (unlockApp) {\n          unlockApp();\n        }\n\n        setIsSubmitting(false);\n      },\n    }\n  );\n\n  const headerTitle = formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user',\n  });\n\n  const handleSubmit = async (body: InitialData, { setErrors }: FormikHelpers<InitialData>) => {\n    try {\n      await postMutation.mutateAsync({\n        ...body,\n        roles: body.roles ?? [],\n      });\n    } catch (err) {\n      if (\n        err instanceof AxiosError &&\n        err.response?.data?.error.message === 'Email already taken'\n      ) {\n        setErrors({ email: err.response.data.error.message });\n      }\n    }\n  };\n\n  const goNext = () => {\n    if (next) {\n      setStep(next);\n    } else {\n      onToggle();\n    }\n  };\n\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\n  const endActions =\n    currentStep === 'create' ? (\n      <Button type=\"submit\" loading={isSubmitting}>\n        {formatMessage(buttonSubmitLabel)}\n      </Button>\n    ) : (\n      <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\n        {formatMessage(buttonSubmitLabel)}\n      </Button>\n    );\n\n  // block rendering until the EE component is fully loaded\n  if (!MagicLink) {\n    return null;\n  }\n\n  return (\n    <ModalLayout onClose={onToggle} labelledBy=\"title\">\n      <ModalHeader>\n        {/**\n         * TODO: this is not semantically correct and should be amended.\n         */}\n        <Breadcrumbs label={headerTitle}>\n          <Crumb isCurrent>{headerTitle}</Crumb>\n        </Breadcrumbs>\n      </ModalHeader>\n      <Formik\n        enableReinitialize\n        initialValues={initialValues ?? {}}\n        onSubmit={handleSubmit}\n        validationSchema={FORM_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ errors, handleChange, values }) => {\n          return (\n            <Form>\n              <ModalBody>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {currentStep !== 'create' && <MagicLink registrationToken={registrationToken} />}\n                  <Box>\n                    <Typography variant=\"beta\" as=\"h2\">\n                      {formatMessage({\n                        id: 'app.components.Users.ModalCreateBody.block-title.details',\n                        defaultMessage: 'User details',\n                      })}\n                    </Typography>\n                    <Box paddingTop={4}>\n                      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                        <Grid gap={5}>\n                          {FORM_LAYOUT.map((row) => {\n                            return row.map((input) => {\n                              return (\n                                <GridItem key={input.name} {...input.size}>\n                                  <GenericInput\n                                    {...input}\n                                    disabled={isDisabled}\n                                    error={errors[input.name as keyof InitialData]}\n                                    onChange={handleChange}\n                                    value={values[input.name as keyof InitialData]}\n                                  />\n                                </GridItem>\n                              );\n                            });\n                          })}\n                        </Grid>\n                      </Flex>\n                    </Box>\n                  </Box>\n                  <Box>\n                    <Typography variant=\"beta\" as=\"h2\">\n                      {formatMessage({\n                        id: 'global.roles',\n                        defaultMessage: \"User's role\",\n                      })}\n                    </Typography>\n                    <Box paddingTop={4}>\n                      <Grid gap={5}>\n                        <GridItem col={6} xs={12}>\n                          <SelectRoles\n                            disabled={isDisabled}\n                            error={errors.roles}\n                            onChange={handleChange}\n                            value={values.roles ?? []}\n                          />\n                        </GridItem>\n                        {roleLayout.map((row) => {\n                          return row.map((input) => {\n                            return (\n                              <GridItem key={input.name} {...input.size}>\n                                <GenericInput\n                                  {...input}\n                                  disabled={isDisabled}\n                                  onChange={handleChange}\n                                  value={values[input.name]}\n                                />\n                              </GridItem>\n                            );\n                          });\n                        })}\n                      </Grid>\n                    </Box>\n                  </Box>\n                </Flex>\n              </ModalBody>\n              <ModalFooter\n                startActions={\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                }\n                endActions={endActions}\n              />\n            </Form>\n          );\n        }}\n      </Formik>\n    </ModalLayout>\n  );\n};\n\ninterface InitialData {\n  firstname?: string;\n  lastname?: string;\n  email?: string;\n  roles?: Entity.ID[];\n  useSSORegistration?: boolean;\n}\n\nconst FORM_INITIAL_VALUES = {\n  firstname: '',\n  lastname: '',\n  email: '',\n  roles: [],\n};\n\nconst ROLE_LAYOUT = [] satisfies FormLayout[][];\n\nconst FORM_LAYOUT = [\n  [\n    {\n      intlLabel: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'text',\n      size: {\n        col: 6,\n        xs: 12,\n      },\n      required: true,\n    },\n    {\n      intlLabel: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'text',\n      size: {\n        col: 6,\n        xs: 12,\n      },\n    },\n  ],\n  [\n    {\n      intlLabel: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email',\n      size: {\n        col: 6,\n        xs: 12,\n      },\n      required: true,\n    },\n  ],\n] satisfies FormLayout[][];\n\nconst FORM_SCHEMA = yup.object().shape({\n  firstname: yup.string().trim().required(translatedErrors.required),\n  lastname: yup.string(),\n  email: yup.string().email(translatedErrors.email).required(translatedErrors.required),\n  roles: yup.array().min(1, translatedErrors.required).required(translatedErrors.required),\n});\n\nconst STEPPER = {\n  create: {\n    buttonSubmitLabel: {\n      id: 'app.containers.Users.ModalForm.footer.button-success',\n      defaultMessage: 'Invite user',\n    },\n    isDisabled: false,\n    next: 'magic-link',\n  },\n  'magic-link': {\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\n    isDisabled: true,\n    next: null,\n  },\n} as const;\n\nexport { ModalForm };\nexport type { InitialData };\n","import {\n  BaseCheckbox,\n  Box,\n  Flex,\n  IconButton,\n  Tbody,\n  Td,\n  Tr,\n  Typography,\n} from '@strapi/design-system';\nimport { TableRowProps, onRowClick, stopPropagation } from '@strapi/helper-plugin';\nimport { Pencil, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../../shared/contracts/shared';\nimport { getFullName } from '../../../../../utils/getFullName';\n\nimport type { ListPageTableHeader } from '../ListPage';\n\ninterface TableRowsProps extends Partial<TableRowProps<SanitizedAdminUser, ListPageTableHeader>> {\n  canDelete: boolean;\n}\n\nconst TableRows = ({\n  canDelete,\n  headers = [],\n  entriesToDelete = [],\n  onClickDelete,\n  onSelectRow,\n  withMainAction,\n  withBulkActions,\n  rows = [],\n}: TableRowsProps) => {\n  const {\n    push,\n    location: { pathname },\n  } = useHistory();\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tbody>\n      {rows.map((data) => {\n        const isChecked = entriesToDelete.findIndex((id) => id === data.id) !== -1;\n\n        return (\n          <Tr\n            key={data.id}\n            {...onRowClick({\n              fn: () => push(`${pathname}/${data.id}`),\n              condition: withBulkActions,\n            })}\n          >\n            {withMainAction && (\n              <Td {...stopPropagation}>\n                <BaseCheckbox\n                  aria-label={formatMessage(\n                    {\n                      id: 'app.component.table.select.one-entry',\n                      defaultMessage: `Select {target}`,\n                    },\n                    { target: getFullName(data?.firstname ?? '', data.lastname) }\n                  )}\n                  checked={isChecked}\n                  onChange={() => {\n                    if (onSelectRow) {\n                      onSelectRow({ name: data.id, value: !isChecked });\n                    }\n                  }}\n                />\n              </Td>\n            )}\n            {headers.map(({ key, cellFormatter, name, ...rest }) => {\n              return (\n                <Td key={key}>\n                  {typeof cellFormatter === 'function' ? (\n                    cellFormatter(data, { key, name, formatMessage, ...rest })\n                  ) : (\n                    // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                    <Typography textColor=\"neutral800\">{data[name] || '-'}</Typography>\n                  )}\n                </Td>\n              );\n            })}\n\n            {withBulkActions && (\n              <Td>\n                <Flex justifyContent=\"end\">\n                  <IconButton\n                    onClick={() => push(`${pathname}/${data.id}`)}\n                    label={formatMessage(\n                      { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                      { target: getFullName(data.firstname ?? '', data.lastname) }\n                    )}\n                    noBorder\n                    icon={<Pencil />}\n                  />\n\n                  {canDelete && (\n                    <Box paddingLeft={1} {...stopPropagation}>\n                      <IconButton\n                        onClick={() => {\n                          if (onClickDelete) {\n                            onClickDelete(data.id);\n                          }\n                        }}\n                        label={formatMessage(\n                          { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                          { target: getFullName(data.firstname ?? '', data.lastname) }\n                        )}\n                        noBorder\n                        icon={<Trash />}\n                      />\n                    </Box>\n                  )}\n                </Flex>\n              </Td>\n            )}\n          </Tr>\n        );\n      })}\n    </Tbody>\n  );\n};\n\nexport { TableRows };\nexport type { TableRowsProps };\n","import * as React from 'react';\n\nimport {\n  ActionLayout,\n  ContentLayout,\n  HeaderLayout,\n  Main,\n  Flex,\n  Typography,\n  Box,\n} from '@strapi/design-system';\nimport {\n  DynamicTable,\n  NoPermissions,\n  SearchURLQuery,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useRBAC,\n  Status,\n  PageSizeURLQuery,\n  PaginationURLQuery,\n  CheckPagePermissions,\n  TableHeader,\n} from '@strapi/helper-plugin';\nimport { AxiosError, AxiosResponse } from 'axios';\nimport * as qs from 'qs';\nimport { IntlShape, MessageDescriptor, useIntl } from 'react-intl';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { DeleteMany } from '../../../../../../shared/contracts/user';\nimport { useAdminUsers } from '../../../../hooks/useAdminUsers';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { Filters } from '../../components/Filters';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\nimport { TableRows } from './components/TableRows';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst EE_LICENSE_LIMIT_QUERY_KEY = ['ee', 'license-limit-info'];\n\nconst ListPageCE = () => {\n  const { post } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useSelector(selectAdminPermissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const queryClient = useQueryClient();\n  const toggleNotification = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  useFocusWhenNavigate();\n  const {\n    users,\n    pagination,\n    isError,\n    isLoading,\n    refetch: refetchAdminUsers,\n  } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }), {\n    cacheTime: 0,\n    enabled: canRead,\n  });\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    metadatas: {\n      ...header.metadatas,\n      label: formatMessage(header.metadatas.label),\n    },\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const deleteAllMutation = useMutation<\n    AxiosResponse<DeleteMany.Response>,\n    AxiosError<Required<DeleteMany.Response>>,\n    DeleteMany.Request['body']['ids']\n  >(\n    async (ids) =>\n      post<DeleteMany.Response, AxiosResponse<DeleteMany.Response>, DeleteMany.Request['body']>(\n        '/admin/users/batch-delete',\n        { ids }\n      ),\n    {\n      async onSuccess() {\n        await refetchAdminUsers();\n\n        // Toggle enabled/ disabled state on the invite button\n        await queryClient.refetchQueries(EE_LICENSE_LIMIT_QUERY_KEY);\n      },\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n      },\n    }\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  return (\n    <Main aria-busy={isLoading}>\n      <SettingsPageTitle name=\"Users\" />\n      <HeaderLayout\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      {canRead && (\n        <ActionLayout\n          startActions={\n            <>\n              <SearchURLQuery\n                label={formatMessage(\n                  { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                  { target: title }\n                )}\n              />\n              {/* @ts-expect-error – TODO: fix the way filters work and are passed around, this will be a headache. */}\n              <Filters displayedFilters={DISPLAYED_HEADERS} />\n            </>\n          }\n        />\n      )}\n\n      <ContentLayout>\n        {!canRead && <NoPermissions />}\n        {/* TODO: Replace error message with something better */}\n        {isError && <div>TODO: An error occurred</div>}\n        {canRead && (\n          <>\n            <DynamicTable\n              contentType=\"Users\"\n              isLoading={isLoading}\n              onConfirmDeleteAll={async (ids) => {\n                await deleteAllMutation.mutateAsync(ids);\n              }}\n              onConfirmDelete={async (id) => {\n                await deleteAllMutation.mutateAsync([id]);\n              }}\n              headers={headers}\n              rows={users}\n              withBulkActions\n              withMainAction={canDelete}\n            >\n              <TableRows canDelete={canDelete} />\n            </DynamicTable>\n\n            {pagination && (\n              <Box paddingTop={4}>\n                <Flex alignItems=\"flex-end\" justifyContent=\"space-between\">\n                  <PageSizeURLQuery />\n                  <PaginationURLQuery pagination={pagination} />\n                </Flex>\n              </Box>\n            )}\n          </>\n        )}\n      </ContentLayout>\n      {isModalOpened && (\n        <ModalForm\n          onSuccess={async () => {\n            await refetchAdminUsers();\n            await queryClient.refetchQueries(EE_LICENSE_LIMIT_QUERY_KEY);\n          }}\n          onToggle={handleToggle}\n        />\n      )}\n    </Main>\n  );\n};\n\ninterface ListPageTableHeader extends Omit<TableHeader, 'metadatas' | 'name'> {\n  name: Extract<\n    keyof SanitizedAdminUser,\n    'firstname' | 'lastname' | 'email' | 'roles' | 'username' | 'isActive'\n  >;\n  cellFormatter?: (\n    data: SanitizedAdminUser,\n    meta: Omit<ListPageTableHeaderWithStringMetadataLabel, 'cellFormatter'> &\n      Pick<IntlShape, 'formatMessage'>\n  ) => React.ReactNode;\n  key: string;\n  metadatas: {\n    label: MessageDescriptor;\n  } & Omit<TableHeader['metadatas'], 'label'>;\n}\n\ninterface ListPageTableHeaderWithStringMetadataLabel\n  extends Omit<ListPageTableHeader, 'metadatas'> {\n  metadatas: {\n    label: string;\n  } & Omit<ListPageTableHeader['metadatas'], 'label'>;\n}\n\nconst TABLE_HEADERS = [\n  {\n    name: 'firstname',\n    key: 'firstname',\n    metadatas: {\n      label: {\n        id: 'Settings.permissions.users.firstname',\n        defaultMessage: 'Firstname',\n      },\n      sortable: true,\n    },\n  },\n  {\n    name: 'lastname',\n    key: 'lastname',\n    metadatas: {\n      label: {\n        id: 'Settings.permissions.users.lastname',\n        defaultMessage: 'Lastname',\n      },\n      sortable: true,\n    },\n  },\n  {\n    key: 'email',\n    name: 'email',\n    metadatas: {\n      label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n      sortable: true,\n    },\n  },\n  {\n    key: 'roles',\n    name: 'roles',\n    metadatas: {\n      label: {\n        id: 'Settings.permissions.users.roles',\n        defaultMessage: 'Roles',\n      },\n      sortable: false,\n    },\n    cellFormatter({ roles }, { formatMessage }) {\n      return (\n        <Typography textColor=\"neutral800\">\n          {roles\n            .map((role) =>\n              formatMessage({\n                id: `Settings.permissions.users.${role.code}`,\n                defaultMessage: role.name,\n              })\n            )\n            .join(',\\n')}\n        </Typography>\n      );\n    },\n  },\n  {\n    key: 'username',\n    name: 'username',\n    metadatas: {\n      label: {\n        id: 'Settings.permissions.users.username',\n        defaultMessage: 'Username',\n      },\n      sortable: true,\n    },\n  },\n  {\n    key: 'isActive',\n    name: 'isActive',\n    metadatas: {\n      label: {\n        id: 'Settings.permissions.users.user-status',\n        defaultMessage: 'User status',\n      },\n      sortable: false,\n    },\n    cellFormatter({ isActive }, { formatMessage }) {\n      return (\n        <Flex>\n          <Status variant={isActive ? 'success' : 'danger'} />\n          <Typography textColor=\"neutral800\">\n            {formatMessage({\n              id: isActive\n                ? 'Settings.permissions.users.active'\n                : 'Settings.permissions.users.inactive',\n              defaultMessage: isActive ? 'Active' : 'Inactive',\n            })}\n          </Typography>\n        </Flex>\n      );\n    },\n  },\n] satisfies ListPageTableHeader[];\n\nconst DISPLAYED_HEADERS = [\n  {\n    name: 'firstname',\n    metadatas: { label: 'Firstname' },\n    fieldSchema: { type: 'string' },\n  },\n  {\n    name: 'lastname',\n    metadatas: { label: 'Lastname' },\n    fieldSchema: { type: 'string' },\n  },\n  {\n    name: 'email',\n    metadatas: { label: 'Email' },\n    fieldSchema: { type: 'email' },\n  },\n  {\n    name: 'username',\n    metadatas: { label: 'Username' },\n    fieldSchema: { type: 'string' },\n  },\n  {\n    name: 'isActive',\n    metadatas: { label: 'Active user' },\n    fieldSchema: { type: 'boolean' },\n  },\n];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.users.main}>\n      <ListPage />\n    </CheckPagePermissions>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\nexport type { ListPageTableHeaderWithStringMetadataLabel as ListPageTableHeader };\n"],"names":["useIntl","jsx","Button","Envelop","React","useNotification","useOverlayBlocker","useFetchClient","useAPIErrorHandler","useEnterprise","MagicLinkCE","useMutation","AxiosError","jsxs","ModalLayout","ModalHeader","Breadcrumbs","Crumb","Formik","Form","ModalBody","Flex","Box","Typography","Grid","GridItem","GenericInput","SelectRoles","ModalFooter","yup","translatedErrors","useHistory","Tbody","Tr","onRowClick","Td","stopPropagation","BaseCheckbox","getFullName","IconButton","Pencil","Trash","useSelector","selectAdminPermissions","useRBAC","useQueryClient","useLocation","useFocusWhenNavigate","useAdminUsers","qs","Main","SettingsPageTitle","HeaderLayout","ActionLayout","Fragment","SearchURLQuery","Filters","ContentLayout","NoPermissions","DynamicTable","PageSizeURLQuery","PaginationURLQuery","Status","CheckPagePermissions"],"mappings":"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"}