{"version":3,"file":"ListView-96fe1016.js","sources":["../../admin/src/pages/Settings/pages/ApiTokens/ListView.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { ContentLayout, HeaderLayout, LinkButton, Main } from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  NoContent,\n  NoPermissions,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useGuidedTour,\n  useNotification,\n  useRBAC,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport { AxiosError } from 'axios';\nimport qs from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { API_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { Table } from '../../components/Tokens/Table';\n\nimport type { List } from '../../../../../../shared/contracts/api-token';\n\nconst TABLE_HEADERS = [\n  {\n    name: 'name',\n    key: 'name',\n    metadatas: {\n      label: {\n        id: 'Settings.apiTokens.ListView.headers.name',\n        defaultMessage: 'Name',\n      },\n      sortable: true,\n    },\n  },\n  {\n    name: 'description',\n    key: 'description',\n    metadatas: {\n      label: {\n        id: 'Settings.apiTokens.ListView.headers.description',\n        defaultMessage: 'Description',\n      },\n      sortable: false,\n    },\n  },\n  {\n    name: 'createdAt',\n    key: 'createdAt',\n    metadatas: {\n      label: {\n        id: 'Settings.apiTokens.ListView.headers.createdAt',\n        defaultMessage: 'Created at',\n      },\n      sortable: false,\n    },\n  },\n  {\n    name: 'lastUsedAt',\n    key: 'lastUsedAt',\n    metadatas: {\n      label: {\n        id: 'Settings.apiTokens.ListView.headers.lastUsedAt',\n        defaultMessage: 'Last used',\n      },\n      sortable: false,\n    },\n  },\n];\n\nexport const ListView = () => {\n  useFocusWhenNavigate();\n  const queryClient = useQueryClient();\n  const { formatMessage } = useIntl();\n  const toggleNotification = useNotification();\n  const permissions = useSelector(selectAdminPermissions);\n  const {\n    allowedActions: { canCreate, canDelete, canUpdate, canRead },\n  } = useRBAC(permissions.settings?.['api-tokens']);\n  const { push } = useHistory();\n  const { trackUsage } = useTracking();\n  const { startSection } = useGuidedTour();\n  const startSectionRef = React.useRef(startSection);\n  const { get, del } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    if (startSectionRef.current) {\n      startSectionRef.current('apiTokens');\n    }\n  }, []);\n\n  React.useEffect(() => {\n    push({ search: qs.stringify({ sort: 'name:ASC' }, { encode: false }) });\n  }, [push]);\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    metadatas: {\n      ...header.metadatas,\n      label: formatMessage(header.metadatas.label),\n    },\n  }));\n\n  const { data: apiTokens, isLoading: isLoadingTokens } = useQuery(\n    ['api-tokens'],\n    async () => {\n      trackUsage('willAccessTokenList', {\n        tokenType: API_TOKEN_TYPE,\n      });\n\n      const {\n        data: { data },\n      } = await get<List.Response>(`/admin/api-tokens`);\n\n      trackUsage('didAccessTokenList', { number: data.length, tokenType: API_TOKEN_TYPE });\n\n      return data;\n    },\n    {\n      cacheTime: 0,\n      enabled: canRead,\n      onError(error) {\n        if (error instanceof AxiosError) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        }\n      },\n    }\n  );\n\n  const isLoading = isLoadingTokens;\n\n  const deleteMutation = useMutation(\n    async (id) => {\n      await del(`/admin/api-tokens/${id}`);\n    },\n    {\n      async onSuccess() {\n        await queryClient.invalidateQueries(['api-tokens']);\n        trackUsage('didDeleteToken');\n      },\n      onError(error) {\n        if (error instanceof AxiosError) {\n          toggleNotification({ type: 'warning', message: formatAPIError(error) });\n        }\n      },\n    }\n  );\n\n  const hasApiTokens = apiTokens && apiTokens.length > 0;\n  const shouldDisplayDynamicTable = canRead && hasApiTokens;\n  const shouldDisplayNoContent = canRead && !hasApiTokens && !canCreate;\n  const shouldDisplayNoContentWithCreationButton = canRead && !hasApiTokens && canCreate;\n\n  return (\n    <Main aria-busy={isLoading}>\n      {/* TODO: this needs to be translated */}\n      <SettingsPageTitle name=\"API Tokens\" />\n      <HeaderLayout\n        title={formatMessage({ id: 'Settings.apiTokens.title', defaultMessage: 'API Tokens' })}\n        subtitle={formatMessage({\n          id: 'Settings.apiTokens.description',\n          defaultMessage: 'List of generated tokens to consume the API',\n        })}\n        primaryAction={\n          canCreate && (\n            <LinkButton\n              data-testid=\"create-api-token-button\"\n              startIcon={<Plus />}\n              size=\"S\"\n              onClick={() =>\n                trackUsage('willAddTokenFromList', {\n                  tokenType: API_TOKEN_TYPE,\n                })\n              }\n              to=\"/settings/api-tokens/create\"\n            >\n              {formatMessage({\n                id: 'Settings.apiTokens.create',\n                defaultMessage: 'Create new API Token',\n              })}\n            </LinkButton>\n          )\n        }\n      />\n      <ContentLayout>\n        {!canRead && <NoPermissions />}\n        {shouldDisplayDynamicTable && (\n          <Table\n            permissions={{ canRead, canDelete, canUpdate }}\n            headers={headers}\n            contentType=\"api-tokens\"\n            isLoading={isLoading}\n            // @ts-expect-error not converted yet\n            onConfirmDelete={(id) => deleteMutation.mutateAsync(id)}\n            tokens={apiTokens}\n            tokenType={API_TOKEN_TYPE}\n          />\n        )}\n        {shouldDisplayNoContentWithCreationButton && (\n          <NoContent\n            content={{\n              id: 'Settings.apiTokens.addFirstToken',\n              defaultMessage: 'Add your first API Token',\n            }}\n            action={\n              <LinkButton variant=\"secondary\" startIcon={<Plus />} to=\"/settings/api-tokens/create\">\n                {formatMessage({\n                  id: 'Settings.apiTokens.addNewToken',\n                  defaultMessage: 'Add new API Token',\n                })}\n              </LinkButton>\n            }\n          />\n        )}\n        {shouldDisplayNoContent && (\n          <NoContent\n            content={{\n              id: 'Settings.apiTokens.emptyStateLayout',\n              defaultMessage: 'You donâ€™t have any content yet...',\n            }}\n          />\n        )}\n      </ContentLayout>\n    </Main>\n  );\n};\n\nexport const ProtectedListView = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.['api-tokens'].main}>\n      <ListView />\n    </CheckPagePermissions>\n  );\n};\n"],"names":["useFocusWhenNavigate","useQueryClient","useIntl","useNotification","useSelector","selectAdminPermissions","useRBAC","useHistory","useTracking","useGuidedTour","React","useFetchClient","useAPIErrorHandler","qs","useQuery","API_TOKEN_TYPE","AxiosError","useMutation","jsxs","Main","jsx","SettingsPageTitle","HeaderLayout","LinkButton","Plus","ContentLayout","NoPermissions","Table","NoContent","CheckPagePermissions"],"mappings":"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"}