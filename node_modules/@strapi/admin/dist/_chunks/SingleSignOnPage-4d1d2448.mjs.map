{"version":3,"file":"SingleSignOnPage-4d1d2448.mjs","sources":["../../ee/admin/src/pages/SettingsPage/pages/SingleSignOnPage.tsx"],"sourcesContent":["import {\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Layout,\n  Main,\n  MultiSelect,\n  MultiSelectOption,\n  Option,\n  Select,\n  ToggleInput,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  Form,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  translatedErrors,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useOverlayBlocker,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { AxiosError } from 'axios';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport * as yup from 'yup';\n\nimport { useAdminRoles } from '../../../../../../admin/src/hooks/useAdminRoles';\nimport { selectAdminPermissions } from '../../../../../../admin/src/selectors';\nimport { formatAPIErrors } from '../../../../../../admin/src/utils/formatAPIErrors';\nimport { ProvidersOptions } from '../../../../../../shared/contracts/admin';\n\nconst schema = yup.object().shape({\n  autoRegister: yup.bool().required(translatedErrors.required),\n  defaultRole: yup.mixed().when('autoRegister', (value, initSchema) => {\n    return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n  }),\n  ssoLockedRoles: yup\n    .array()\n    .nullable()\n    .of(\n      yup.mixed().when('ssoLockedRoles', (value, initSchema) => {\n        return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n      })\n    ),\n});\n\nexport const SingleSignOnPage = () => {\n  useFocusWhenNavigate();\n\n  const { formatMessage } = useIntl();\n  const permissions = useSelector(selectAdminPermissions);\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const toggleNotification = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const { get, put } = useFetchClient();\n\n  const { isLoading: isLoadingProviderOptions, data } = useQuery(\n    ['providers', 'options'],\n    async () => {\n      const { data } = await get<ProvidersOptions.Response>('/admin/providers/options');\n\n      return data.data;\n    },\n    {\n      onError() {\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error', defaultMessage: 'An error occured' },\n        });\n      },\n    }\n  );\n\n  const submitMutation = useMutation<\n    ProvidersOptions.Response['data'],\n    AxiosError<ProvidersOptions.Response>,\n    ProvidersOptions.Request['body']\n  >(\n    async (body) => {\n      const { autoRegister, defaultRole, ssoLockedRoles } = body;\n      const { data } = await put<ProvidersOptions.Response>('/admin/providers/options', {\n        autoRegister,\n        defaultRole,\n        ssoLockedRoles,\n      });\n\n      return data.data;\n    },\n    {\n      async onSettled() {\n        // @ts-expect-error â€“ we're going to implement a context assertion to avoid this\n        unlockApp();\n      },\n    }\n  );\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate, canReadRoles },\n  } = useRBAC({\n    ...permissions.settings?.sso,\n    readRoles: permissions.settings?.roles.read ?? [],\n  });\n\n  const { roles, isLoading: isLoadingRoles } = useAdminRoles(undefined, {\n    enabled: canReadRoles,\n  });\n\n  const handleSubmit = async (\n    body: ProvidersOptions.Request['body'],\n    { resetForm, setErrors }: FormikHelpers<ProvidersOptions.Request['body']>\n  ) => {\n    // @ts-expect-error - context assertation\n    lockApp();\n\n    submitMutation.mutate(body, {\n      onSuccess(data) {\n        resetForm({ values: data });\n        toggleNotification({\n          type: 'success',\n          message: { id: 'notification.success.saved' },\n        });\n      },\n      onError(err) {\n        if (err instanceof AxiosError && err.response) {\n          // @ts-expect-error formatApiErrors is waiting for a Record<string, string[]> while response.data contains different value types than string.\n          const errors = formatAPIErrors(err.response.data);\n          const fieldsErrors = Object.keys(errors).reduce<\n            FormikErrors<ProvidersOptions.Request['body']>\n          >((acc, current) => {\n            acc[current as keyof ProvidersOptions.Request['body']] = errors[current].id;\n            return acc;\n          }, {});\n          setErrors(fieldsErrors);\n          toggleNotification({\n            type: 'warning',\n            // @ts-expect-error formatAPIError is waiting for \"err\" to be AxiosError<{ error: ApiError }> while few lines above we need error.data there's a conflict between these two functions\n            message: formatAPIError(err),\n          });\n        }\n      },\n    });\n  };\n\n  const { isLoading: isSubmittingForm } = submitMutation;\n  const initialValues = {\n    autoRegister: false,\n    defaultRole: null,\n    ssoLockedRoles: null,\n  };\n  const isLoadingData = isLoadingRoles || isLoadingPermissions || isLoadingProviderOptions;\n  return (\n    <Layout>\n      <SettingsPageTitle name=\"SSO\" />\n      <Main aria-busy={isSubmittingForm || isLoadingData} tabIndex={-1}>\n        <Formik\n          onSubmit={handleSubmit}\n          initialValues={data || initialValues}\n          validationSchema={schema}\n          validateOnChange={false}\n          enableReinitialize\n        >\n          {({ handleChange, isSubmitting, values, setFieldValue, dirty, errors }) => (\n            <Form>\n              <HeaderLayout\n                primaryAction={\n                  <Button\n                    data-testid=\"save-button\"\n                    disabled={!dirty}\n                    loading={isSubmitting}\n                    startIcon={<Check />}\n                    type=\"submit\"\n                    size=\"L\"\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                }\n                title={formatMessage({\n                  id: 'Settings.sso.title',\n                  defaultMessage: 'Single Sign-On',\n                })}\n                subtitle={formatMessage({\n                  id: 'Settings.sso.description',\n                  defaultMessage: 'Configure the settings for the Single Sign-On feature.',\n                })}\n              />\n              <ContentLayout>\n                {isSubmitting || isLoadingData ? (\n                  <LoadingIndicatorPage />\n                ) : (\n                  <Flex\n                    direction=\"column\"\n                    alignItems=\"stretch\"\n                    gap={4}\n                    background=\"neutral0\"\n                    padding={6}\n                    shadow=\"filterShadow\"\n                    hasRadius\n                  >\n                    <Typography variant=\"delta\" as=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid gap={4}>\n                      <GridItem col={6} s={12}>\n                        <ToggleInput\n                          data-testid=\"autoRegister\"\n                          disabled={!canUpdate}\n                          checked={values.autoRegister}\n                          hint={formatMessage({\n                            id: 'Settings.sso.form.registration.description',\n                            defaultMessage: 'Create new user on SSO login if no account exists',\n                          })}\n                          label={formatMessage({\n                            id: 'Settings.sso.form.registration.label',\n                            defaultMessage: 'Auto-registration',\n                          })}\n                          name=\"autoRegister\"\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={handleChange}\n                        />\n                      </GridItem>\n                      <GridItem col={6} s={12}>\n                        <Select\n                          disabled={!canUpdate}\n                          hint={formatMessage({\n                            id: 'Settings.sso.form.defaultRole.description',\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role',\n                          })}\n                          error={\n                            errors.defaultRole\n                              ? formatMessage({\n                                  id: errors.defaultRole,\n                                  defaultMessage: errors.defaultRole,\n                                })\n                              : ''\n                          }\n                          label={formatMessage({\n                            id: 'Settings.sso.form.defaultRole.label',\n                            defaultMessage: 'Default role',\n                          })}\n                          name=\"defaultRole\"\n                          onChange={(value) =>\n                            handleChange({ target: { name: 'defaultRole', value } })\n                          }\n                          placeholder={formatMessage({\n                            id: 'components.InputSelect.option.placeholder',\n                            defaultMessage: 'Choose here',\n                          })}\n                          value={values.defaultRole}\n                        >\n                          {roles.map(({ id, name }) => (\n                            <Option key={id} value={id.toString()}>\n                              {name}\n                            </Option>\n                          ))}\n                        </Select>\n                      </GridItem>\n                      <GridItem col={6} s={12}>\n                        <MultiSelect\n                          disabled={!canUpdate}\n                          hint={formatMessage({\n                            id: 'Settings.sso.form.localAuthenticationLock.description',\n                            defaultMessage:\n                              'Select the roles for which you want to disable the local authentication',\n                          })}\n                          error={\n                            errors.ssoLockedRoles\n                              ? formatMessage({\n                                  id: errors.ssoLockedRoles,\n                                  defaultMessage: errors.ssoLockedRoles,\n                                })\n                              : ''\n                          }\n                          label={formatMessage({\n                            id: 'Settings.sso.form.localAuthenticationLock.label',\n                            defaultMessage: 'Local authentication lock-out',\n                          })}\n                          name=\"ssoLockedRoles\"\n                          onChange={(value) =>\n                            handleChange({\n                              target: {\n                                value,\n                                name: 'ssoLockedRoles',\n                              },\n                            })\n                          }\n                          placeholder={formatMessage({\n                            id: 'components.InputSelect.option.placeholder',\n                            defaultMessage: 'Choose here',\n                          })}\n                          onClear={() => setFieldValue('ssoLockedRoles', [])}\n                          value={values.ssoLockedRoles || []}\n                          withTags\n                        >\n                          {roles.map(({ id, name }) => (\n                            <MultiSelectOption key={id} value={id.toString()}>\n                              {name}\n                            </MultiSelectOption>\n                          ))}\n                        </MultiSelect>\n                      </GridItem>\n                    </Grid>\n                  </Flex>\n                )}\n              </ContentLayout>\n            </Form>\n          )}\n        </Formik>\n      </Main>\n    </Layout>\n  );\n};\n\nexport const ProtectedSSO = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.sso?.main}>\n      <SingleSignOnPage />\n    </CheckPagePermissions>\n  );\n};\n"],"names":["data"],"mappings":"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"}