{"version":3,"file":"EditPage-f5caa375.mjs","sources":["../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/EditPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Flex, Loader, Typography } from '@strapi/design-system';\nimport {\n  ConfirmDialog,\n  useAPIErrorHandler,\n  useFetchClient,\n  useNotification,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { AxiosError } from 'axios';\nimport { useFormik, Form, FormikProvider, FormikErrors } from 'formik';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { ValidationError } from 'yup';\n\nimport { useAdminRoles } from '../../../../../../../admin/src/hooks/useAdminRoles';\nimport { useContentTypes } from '../../../../../../../admin/src/hooks/useContentTypes';\nimport { useInjectReducer } from '../../../../../../../admin/src/hooks/useInjectReducer';\nimport { selectAdminPermissions } from '../../../../../../../admin/src/selectors';\nimport { Stage, Update, Workflow } from '../../../../../../../shared/contracts/review-workflows';\nimport { useLicenseLimits } from '../../../../hooks/useLicenseLimits';\n\nimport {\n  resetWorkflow,\n  setIsLoading,\n  setWorkflow,\n  setContentTypes,\n  setRoles,\n  setWorkflows,\n} from './actions';\nimport * as Layout from './components/Layout';\nimport { LimitsModal } from './components/LimitsModal';\nimport { Stages } from './components/Stages';\nimport { WorkflowAttributes } from './components/WorkflowAttributes';\nimport {\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  REDUX_NAMESPACE,\n} from './constants';\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\nimport { CurrentWorkflow, reducer } from './reducer';\nimport {\n  selectIsWorkflowDirty,\n  selectCurrentWorkflow,\n  selectHasDeletedServerStages,\n  selectIsLoading,\n  selectRoles,\n  selectServerState,\n} from './selectors';\nimport { validateWorkflow } from './utils/validateWorkflow';\n\nexport const ReviewWorkflowsEditPage = () => {\n  const { workflowId } = useParams<{ workflowId: string }>();\n  const permissions = useSelector(selectAdminPermissions);\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const { put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const { isLoading: isLoadingWorkflow, meta, workflows, refetch } = useReviewWorkflows();\n  const { collectionTypes, singleTypes, isLoading: isLoadingContentTypes } = useContentTypes();\n  const serverState = useSelector(selectServerState);\n  const currentWorkflowIsDirty = useSelector(selectIsWorkflowDirty);\n  const currentWorkflow = useSelector(selectCurrentWorkflow);\n  const hasDeletedServerStages = useSelector(selectHasDeletedServerStages);\n  const roles = useSelector(selectRoles);\n  const isLoading = useSelector(selectIsLoading);\n  const {\n    allowedActions: { canDelete, canUpdate },\n  } = useRBAC(permissions.settings?.['review-workflows']);\n  const [savePrompts, setSavePrompts] = React.useState<{\n    hasDeletedServerStages?: boolean;\n    hasReassignedContentTypes?: boolean;\n  }>({});\n  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();\n  const { isLoading: isLoadingRoles, roles: serverRoles } = useAdminRoles(undefined, {\n    retry: false,\n  });\n  const [showLimitModal, setShowLimitModal] = React.useState<'workflow' | 'stage' | null>(null);\n  const [initialErrors, setInitialErrors] = React.useState<FormikErrors<CurrentWorkflow>>();\n\n  const workflow = workflows?.find((workflow) => workflow.id === parseInt(workflowId, 10));\n  const contentTypesFromOtherWorkflows = workflows\n    ?.filter((workflow) => workflow.id !== parseInt(workflowId, 10))\n    .flatMap((workflow) => workflow.contentTypes);\n\n  const limits = getFeature<string>('review-workflows');\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];\n  const stagesPerWorkflow = limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME];\n\n  const { mutateAsync, isLoading: isLoadingMutation } = useMutation<\n    Update.Response['data'],\n    AxiosError<Update.Response>,\n    { workflow: Update.Request['body'] }\n  >(\n    async ({ workflow }) => {\n      const {\n        data: { data },\n      } = await put(`/admin/review-workflows/workflows/${workflow.id}`, {\n        data: workflow,\n      });\n\n      return data;\n    },\n    {\n      onSuccess() {\n        toggleNotification({\n          type: 'success',\n          message: { id: 'notification.success.saved', defaultMessage: 'Saved' },\n        });\n      },\n    }\n  );\n\n  const updateWorkflow = async (workflow: Partial<Workflow>) => {\n    // reset the error messages\n    setInitialErrors(undefined);\n\n    try {\n      const res = await mutateAsync({\n        workflow: {\n          ...workflow,\n\n          // compare permissions of stages and only submit them if at least one has\n          // changed; this enables partial updates e.g. for users who don't have\n          // permissions to see roles\n          stages: workflow.stages?.map((stage) => {\n            let hasUpdatedPermissions = true;\n            const serverStage = serverState.workflow?.stages?.find(\n              (serverStage) => serverStage.id === stage?.id\n            );\n\n            if (serverStage) {\n              hasUpdatedPermissions =\n                serverStage.permissions?.length !== stage.permissions?.length ||\n                !serverStage.permissions?.every(\n                  (serverPermission) =>\n                    !!stage.permissions?.find(\n                      (permission) => permission.role === serverPermission.role\n                    )\n                );\n            }\n\n            return {\n              ...stage,\n              permissions: hasUpdatedPermissions ? stage.permissions : undefined,\n            } satisfies Stage;\n          }),\n        },\n      });\n\n      return res;\n    } catch (error) {\n      if (error instanceof AxiosError) {\n        // TODO: this would benefit from a utility to get a formik error\n        // representation from an API error\n        if (\n          error.response &&\n          error.response.data?.error?.name === 'ValidationError' &&\n          error.response.data?.error?.details?.errors?.length > 0\n        ) {\n          setInitialErrors(\n            (error.response.data?.error?.details?.errors as ValidationError[]).reduce(\n              (acc, error) => {\n                if (error.path) set(acc, error.path, error.message);\n\n                return acc;\n              },\n              {}\n            )\n          );\n        }\n\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n\n        return null;\n      }\n    }\n  };\n\n  const submitForm = async () => {\n    await updateWorkflow(currentWorkflow);\n    await refetch();\n\n    setSavePrompts({});\n  };\n\n  const handleConfirmDeleteDialog = async () => {\n    await submitForm();\n  };\n\n  const handleConfirmClose = () => {\n    setSavePrompts({});\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialErrors,\n    initialValues: currentWorkflow,\n    async onSubmit() {\n      const isContentTypeReassignment = currentWorkflow.contentTypes?.some((contentType) =>\n        contentTypesFromOtherWorkflows?.includes(contentType)\n      );\n\n      if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n        /**\n         * If the current license has a limit, check if the total count of workflows\n         * exceeds that limit and display the limits modal instead of sending the\n         * update, because it would throw an API error.\n         */\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit, check if the total count of stages\n         * exceeds that limit and display the limits modal instead of sending the\n         * update, because it would throw an API error.\n         */\n      } else if (\n        currentWorkflow.stages &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length > parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      } else if (hasDeletedServerStages || isContentTypeReassignment) {\n        if (hasDeletedServerStages) {\n          setSavePrompts((prev) => ({ ...prev, hasDeletedServerStages: true }));\n        }\n\n        if (isContentTypeReassignment) {\n          setSavePrompts((prev) => ({ ...prev, hasReassignedContentTypes: true }));\n        }\n      } else {\n        submitForm();\n      }\n    },\n    validate(values) {\n      return validateWorkflow({ values, formatMessage });\n    },\n  });\n\n  useInjectReducer(REDUX_NAMESPACE, reducer);\n\n  React.useEffect(() => {\n    if (!isLoadingWorkflow && workflow && workflows) {\n      dispatch(setWorkflow({ workflow }));\n      dispatch(setWorkflows({ workflows }));\n    }\n\n    if (!isLoadingContentTypes) {\n      dispatch(setContentTypes({ collectionTypes, singleTypes }));\n    }\n\n    if (!isLoadingRoles) {\n      dispatch(setRoles(serverRoles));\n    }\n\n    dispatch(setIsLoading(isLoadingWorkflow || isLoadingContentTypes || isLoadingRoles));\n\n    // reset the state to the initial state to avoid flashes if a user\n    // navigates from an edit-view to a create-view\n    return () => {\n      dispatch(resetWorkflow());\n    };\n  }, [\n    collectionTypes,\n    dispatch,\n    isLoadingContentTypes,\n    isLoadingWorkflow,\n    isLoadingRoles,\n    serverRoles,\n    singleTypes,\n    workflow,\n    workflows,\n  ]);\n\n  /**\n   * If the current license has a limit:\n   * check if the total count of workflows or stages exceeds that limit and display\n   * the limits modal on page load. It can be closed by the user, but the\n   * API will throw an error in case they try to create a new workflow or update the\n   * stages.\n   *\n   * If the current license does not have a limit (e.g. offline license):\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\n   * the API will throw an error.\n   *\n   */\n\n  React.useEffect(() => {\n    if (!isLoadingWorkflow && !isLicenseLoading) {\n      if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n        setShowLimitModal('workflow');\n      } else if (\n        currentWorkflow.stages &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length > parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      }\n    }\n  }, [\n    currentWorkflow.stages,\n    isLicenseLoading,\n    isLoadingWorkflow,\n    limits,\n    meta,\n    numberOfWorkflows,\n    stagesPerWorkflow,\n  ]);\n\n  React.useEffect(() => {\n    if (!isLoading && roles?.length === 0) {\n      toggleNotification({\n        blockTransition: true,\n        type: 'warning',\n        message: formatMessage({\n          id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You don’t have the permission to see roles',\n        }),\n      });\n    }\n  }, [formatMessage, isLoading, roles, toggleNotification]);\n\n  // TODO: redirect back to list-view if workflow is not found?\n\n  return (\n    <>\n      <Layout.DragLayerRendered />\n\n      <FormikProvider value={formik}>\n        <Form onSubmit={formik.handleSubmit}>\n          <Layout.Header\n            navigationAction={<Layout.Back href=\"/settings/review-workflows\" />}\n            primaryAction={\n              canUpdate && (\n                <Button\n                  startIcon={<Check />}\n                  type=\"submit\"\n                  size=\"M\"\n                  disabled={!currentWorkflowIsDirty}\n                  // if the confirm dialog is open the loading state is on\n                  // the confirm button already\n                  loading={!Boolean(Object.keys(savePrompts).length > 0) && isLoadingMutation}\n                >\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              )\n            }\n            subtitle={\n              !isLoading &&\n              formatMessage(\n                {\n                  id: 'Settings.review-workflows.page.subtitle',\n                  defaultMessage: '{count, plural, one {# stage} other {# stages}}',\n                },\n                { count: currentWorkflow.stages?.length }\n              )\n            }\n            title={currentWorkflow.name || ''}\n          />\n\n          <Layout.Root>\n            {isLoading ? (\n              <Flex justifyContent=\"center\">\n                <Loader>\n                  {formatMessage({\n                    id: 'Settings.review-workflows.page.isLoading',\n                    defaultMessage: 'Workflow is loading',\n                  })}\n                </Loader>\n              </Flex>\n            ) : (\n              <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\n                <WorkflowAttributes canUpdate={canUpdate} />\n                <Stages\n                  canDelete={canDelete}\n                  canUpdate={canUpdate}\n                  stages={formik.values?.stages}\n                />\n              </Flex>\n            )}\n          </Layout.Root>\n        </Form>\n      </FormikProvider>\n\n      <ConfirmDialog.Root\n        isConfirmButtonLoading={isLoading}\n        isOpen={Object.keys(savePrompts).length > 0}\n        onToggleDialog={handleConfirmClose}\n        onConfirm={handleConfirmDeleteDialog}\n      >\n        <ConfirmDialog.Body>\n          <Flex direction=\"column\" gap={5}>\n            {savePrompts.hasDeletedServerStages && (\n              <Typography textAlign=\"center\" variant=\"omega\">\n                {formatMessage({\n                  id: 'Settings.review-workflows.page.delete.confirm.stages.body',\n                  defaultMessage:\n                    'All entries assigned to deleted stages will be moved to the previous stage.',\n                })}\n              </Typography>\n            )}\n\n            {savePrompts.hasReassignedContentTypes && (\n              <Typography textAlign=\"center\" variant=\"omega\">\n                {formatMessage(\n                  {\n                    id: 'Settings.review-workflows.page.delete.confirm.contentType.body',\n                    defaultMessage:\n                      '{count} {count, plural, one {content-type} other {content-types}} {count, plural, one {is} other {are}} already mapped to {count, plural, one {another workflow} other {other workflows}}. If you save changes, {count, plural, one {this} other {these}} {count, plural, one {content-type} other {{count} content-types}} will no more be mapped to the {count, plural, one {another workflow} other {other workflows}} and all corresponding information will be removed.',\n                  },\n                  {\n                    count: contentTypesFromOtherWorkflows?.filter((contentType) =>\n                      currentWorkflow.contentTypes?.includes(contentType)\n                    ).length,\n                  }\n                )}\n              </Typography>\n            )}\n\n            <Typography textAlign=\"center\" variant=\"omega\">\n              {formatMessage({\n                id: 'Settings.review-workflows.page.delete.confirm.confirm',\n                defaultMessage: 'Are you sure you want to save?',\n              })}\n            </Typography>\n          </Flex>\n        </ConfirmDialog.Body>\n      </ConfirmDialog.Root>\n\n      <LimitsModal.Root\n        isOpen={showLimitModal === 'workflow'}\n        onClose={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'Settings.review-workflows.edit.page.workflows.limit.title',\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'Settings.review-workflows.edit.page.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root isOpen={showLimitModal === 'stage'} onClose={() => setShowLimitModal(null)}>\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'Settings.review-workflows.edit.page.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'Settings.review-workflows.edit.page.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n};\n"],"names":["workflow","serverStage","error","Layout.DragLayerRendered","Layout.Header","Layout.Back","Layout.Root"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDO,MAAM,0BAA0B,MAAM;AACrC,QAAA,EAAE,eAAe;AACjB,QAAA,cAAc,YAAY,sBAAsB;AAChD,QAAA,EAAE,kBAAkB;AAC1B,QAAM,WAAW;AACX,QAAA,EAAE,QAAQ;AACV,QAAA,EAAE,mBAAmB;AAC3B,QAAM,qBAAqB;AAC3B,QAAM,EAAE,WAAW,mBAAmB,MAAM,WAAW,QAAA,IAAY;AACnE,QAAM,EAAE,iBAAiB,aAAa,WAAW,sBAAA,IAA0B;AACrE,QAAA,cAAc,YAAY,iBAAiB;AAC3C,QAAA,yBAAyB,YAAY,qBAAqB;AAC1D,QAAA,kBAAkB,YAAY,qBAAqB;AACnD,QAAA,yBAAyB,YAAY,4BAA4B;AACjE,QAAA,QAAQ,YAAY,WAAW;AAC/B,QAAA,YAAY,YAAY,eAAe;AACvC,QAAA;AAAA,IACJ,gBAAgB,EAAE,WAAW,UAAU;AAAA,EACrC,IAAA,QAAQ,YAAY,WAAW,kBAAkB,CAAC;AACtD,QAAM,CAAC,aAAa,cAAc,IAAI,MAAM,SAGzC,CAAA,CAAE;AACL,QAAM,EAAE,YAAY,WAAW,qBAAqB,iBAAiB;AACrE,QAAM,EAAE,WAAW,gBAAgB,OAAO,gBAAgB,cAAc,QAAW;AAAA,IACjF,OAAO;AAAA,EAAA,CACR;AACD,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,MAAM,SAAsC,IAAI;AAC5F,QAAM,CAAC,eAAe,gBAAgB,IAAI,MAAM,SAAwC;AAElF,QAAA,WAAW,WAAW,KAAK,CAACA,cAAaA,UAAS,OAAO,SAAS,YAAY,EAAE,CAAC;AACvF,QAAM,iCAAiC,WACnC,OAAO,CAACA,cAAaA,UAAS,OAAO,SAAS,YAAY,EAAE,CAAC,EAC9D,QAAQ,CAACA,cAAaA,UAAS,YAAY;AAExC,QAAA,SAAS,WAAmB,kBAAkB;AAC9C,QAAA,oBAAoB,SAAS,mCAAmC;AAChE,QAAA,oBAAoB,SAAS,8CAA8C;AAEjF,QAAM,EAAE,aAAa,WAAW,kBAAsB,IAAA;AAAA,IAKpD,OAAO,EAAE,UAAAA,gBAAe;AAChB,YAAA;AAAA,QACJ,MAAM,EAAE,KAAK;AAAA,MAAA,IACX,MAAM,IAAI,qCAAqCA,UAAS,EAAE,IAAI;AAAA,QAChE,MAAMA;AAAAA,MAAA,CACP;AAEM,aAAA;AAAA,IACT;AAAA,IACA;AAAA,MACE,YAAY;AACS,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,EAAE,IAAI,8BAA8B,gBAAgB,QAAQ;AAAA,QAAA,CACtE;AAAA,MACH;AAAA,IACF;AAAA,EAAA;AAGI,QAAA,iBAAiB,OAAOA,cAAgC;AAE5D,qBAAiB,MAAS;AAEtB,QAAA;AACI,YAAA,MAAM,MAAM,YAAY;AAAA,QAC5B,UAAU;AAAA,UACR,GAAGA;AAAAA;AAAAA;AAAAA;AAAAA,UAKH,QAAQA,UAAS,QAAQ,IAAI,CAAC,UAAU;AACtC,gBAAI,wBAAwB;AACtB,kBAAA,cAAc,YAAY,UAAU,QAAQ;AAAA,cAChD,CAACC,iBAAgBA,aAAY,OAAO,OAAO;AAAA,YAAA;AAG7C,gBAAI,aAAa;AAEb,sCAAA,YAAY,aAAa,WAAW,MAAM,aAAa,UACvD,CAAC,YAAY,aAAa;AAAA,gBACxB,CAAC,qBACC,CAAC,CAAC,MAAM,aAAa;AAAA,kBACnB,CAAC,eAAe,WAAW,SAAS,iBAAiB;AAAA,gBACvD;AAAA,cAAA;AAAA,YAER;AAEO,mBAAA;AAAA,cACL,GAAG;AAAA,cACH,aAAa,wBAAwB,MAAM,cAAc;AAAA,YAAA;AAAA,UAC3D,CACD;AAAA,QACH;AAAA,MAAA,CACD;AAEM,aAAA;AAAA,aACA,OAAO;AACd,UAAI,iBAAiB,YAAY;AAG/B,YACE,MAAM,YACN,MAAM,SAAS,MAAM,OAAO,SAAS,qBACrC,MAAM,SAAS,MAAM,OAAO,SAAS,QAAQ,SAAS,GACtD;AACA;AAAA,aACG,MAAM,SAAS,MAAM,OAAO,SAAS,QAA6B;AAAA,cACjE,CAAC,KAAKC,WAAU;AACd,oBAAIA,OAAM;AAAM,sBAAI,KAAKA,OAAM,MAAMA,OAAM,OAAO;AAE3C,uBAAA;AAAA,cACT;AAAA,cACA,CAAC;AAAA,YACH;AAAA,UAAA;AAAA,QAEJ;AAEmB,2BAAA;AAAA,UACjB,MAAM;AAAA,UACN,SAAS,eAAe,KAAK;AAAA,QAAA,CAC9B;AAEM,eAAA;AAAA,MACT;AAAA,IACF;AAAA,EAAA;AAGF,QAAM,aAAa,YAAY;AAC7B,UAAM,eAAe,eAAe;AACpC,UAAM,QAAQ;AAEd,mBAAe,CAAE,CAAA;AAAA,EAAA;AAGnB,QAAM,4BAA4B,YAAY;AAC5C,UAAM,WAAW;AAAA,EAAA;AAGnB,QAAM,qBAAqB,MAAM;AAC/B,mBAAe,CAAE,CAAA;AAAA,EAAA;AAGnB,QAAM,SAAS,UAAU;AAAA,IACvB,oBAAoB;AAAA,IACpB;AAAA,IACA,eAAe;AAAA,IACf,MAAM,WAAW;AACT,YAAA,4BAA4B,gBAAgB,cAAc;AAAA,QAAK,CAAC,gBACpE,gCAAgC,SAAS,WAAW;AAAA,MAAA;AAGtD,UAAI,QAAQ,qBAAqB,MAAM,gBAAgB,SAAS,mBAAmB,EAAE,GAAG;AAMtF,0BAAkB,UAAU;AAAA,MAO9B,WACE,gBAAgB,UAChB,qBACA,gBAAgB,OAAO,SAAS,SAAS,mBAAmB,EAAE,GAC9D;AACA,0BAAkB,OAAO;AAAA,MAAA,WAChB,0BAA0B,2BAA2B;AAC9D,YAAI,wBAAwB;AAC1B,yBAAe,CAAC,UAAU,EAAE,GAAG,MAAM,wBAAwB,KAAO,EAAA;AAAA,QACtE;AAEA,YAAI,2BAA2B;AAC7B,yBAAe,CAAC,UAAU,EAAE,GAAG,MAAM,2BAA2B,KAAO,EAAA;AAAA,QACzE;AAAA,MAAA,OACK;AACM;MACb;AAAA,IACF;AAAA,IACA,SAAS,QAAQ;AACf,aAAO,iBAAiB,EAAE,QAAQ,cAAe,CAAA;AAAA,IACnD;AAAA,EAAA,CACD;AAED,mBAAiB,iBAAiB,OAAO;AAEzC,QAAM,UAAU,MAAM;AAChB,QAAA,CAAC,qBAAqB,YAAY,WAAW;AAC/C,eAAS,YAAY,EAAE,SAAS,CAAC,CAAC;AAClC,eAAS,aAAa,EAAE,UAAU,CAAC,CAAC;AAAA,IACtC;AAEA,QAAI,CAAC,uBAAuB;AAC1B,eAAS,gBAAgB,EAAE,iBAAiB,YAAA,CAAa,CAAC;AAAA,IAC5D;AAEA,QAAI,CAAC,gBAAgB;AACV,eAAA,SAAS,WAAW,CAAC;AAAA,IAChC;AAEA,aAAS,aAAa,qBAAqB,yBAAyB,cAAc,CAAC;AAInF,WAAO,MAAM;AACX,eAAS,eAAe;AAAA,IAAA;AAAA,EAC1B,GACC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAeD,QAAM,UAAU,MAAM;AAChB,QAAA,CAAC,qBAAqB,CAAC,kBAAkB;AAC3C,UAAI,QAAQ,qBAAqB,MAAM,gBAAgB,SAAS,mBAAmB,EAAE,GAAG;AACtF,0BAAkB,UAAU;AAAA,MAC9B,WACE,gBAAgB,UAChB,qBACA,gBAAgB,OAAO,SAAS,SAAS,mBAAmB,EAAE,GAC9D;AACA,0BAAkB,OAAO;AAAA,MAC3B;AAAA,IACF;AAAA,EAAA,GACC;AAAA,IACD,gBAAgB;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AAED,QAAM,UAAU,MAAM;AACpB,QAAI,CAAC,aAAa,OAAO,WAAW,GAAG;AAClB,yBAAA;AAAA,QACjB,iBAAiB;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,cAAc;AAAA,UACrB,IAAI;AAAA,UACJ,gBAAgB;AAAA,QAAA,CACjB;AAAA,MAAA,CACF;AAAA,IACH;AAAA,KACC,CAAC,eAAe,WAAW,OAAO,kBAAkB,CAAC;AAIxD,SAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,IAAC,oBAAAC,mBAAA,EAAyB;AAAA,IAE1B,oBAAC,kBAAe,OAAO,QACrB,+BAAC,MAAK,EAAA,UAAU,OAAO,cACrB,UAAA;AAAA,MAAA;AAAA,QAACC;AAAAA,QAAA;AAAA,UACC,kBAAmB,oBAAAC,MAAA,EAAY,MAAK,6BAA6B,CAAA;AAAA,UACjE,eACE,aACE;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,+BAAY,OAAM,EAAA;AAAA,cAClB,MAAK;AAAA,cACL,MAAK;AAAA,cACL,UAAU,CAAC;AAAA,cAGX,SAAS,CAAC,QAAQ,OAAO,KAAK,WAAW,EAAE,SAAS,CAAC,KAAK;AAAA,cAEzD,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UACH;AAAA,UAGJ,UACE,CAAC,aACD;AAAA,YACE;AAAA,cACE,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAClB;AAAA,YACA,EAAE,OAAO,gBAAgB,QAAQ,OAAO;AAAA,UAC1C;AAAA,UAEF,OAAO,gBAAgB,QAAQ;AAAA,QAAA;AAAA,MACjC;AAAA,MAEA,oBAACC,MAAA,EACE,UAAA,YACE,oBAAA,MAAA,EAAK,gBAAe,UACnB,UAAC,oBAAA,QAAA,EACE,UAAc,cAAA;AAAA,QACb,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACjB,CAAA,EACH,CAAA,EACF,CAAA,IAEA,qBAAC,MAAK,EAAA,YAAW,WAAU,WAAU,UAAS,KAAK,GACjD,UAAA;AAAA,QAAA,oBAAC,sBAAmB,WAAsB;AAAA,QAC1C;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,QAAQ,OAAO,QAAQ;AAAA,UAAA;AAAA,QACzB;AAAA,MAAA,EAAA,CACF,EAEJ,CAAA;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,IAEA;AAAA,MAAC,cAAc;AAAA,MAAd;AAAA,QACC,wBAAwB;AAAA,QACxB,QAAQ,OAAO,KAAK,WAAW,EAAE,SAAS;AAAA,QAC1C,gBAAgB;AAAA,QAChB,WAAW;AAAA,QAEX,UAAA,oBAAC,cAAc,MAAd,EACC,+BAAC,MAAK,EAAA,WAAU,UAAS,KAAK,GAC3B,UAAA;AAAA,UAAA,YAAY,0BACV,oBAAA,YAAA,EAAW,WAAU,UAAS,SAAQ,SACpC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBACE;AAAA,UACH,CAAA,GACH;AAAA,UAGD,YAAY,6BACX,oBAAC,cAAW,WAAU,UAAS,SAAQ,SACpC,UAAA;AAAA,YACC;AAAA,cACE,IAAI;AAAA,cACJ,gBACE;AAAA,YACJ;AAAA,YACA;AAAA,cACE,OAAO,gCAAgC;AAAA,gBAAO,CAAC,gBAC7C,gBAAgB,cAAc,SAAS,WAAW;AAAA,cAAA,EAClD;AAAA,YACJ;AAAA,UAAA,GAEJ;AAAA,8BAGD,YAAW,EAAA,WAAU,UAAS,SAAQ,SACpC,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA,GACH;AAAA,QAAA,EAAA,CACF,EACF,CAAA;AAAA,MAAA;AAAA,IACF;AAAA,IAEA;AAAA,MAAC,YAAY;AAAA,MAAZ;AAAA,QACC,QAAQ,mBAAmB;AAAA,QAC3B,SAAS,MAAM,kBAAkB,IAAI;AAAA,QAErC,UAAA;AAAA,UAAC,oBAAA,YAAY,OAAZ,EACE,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA,GACH;AAAA,UAEC,oBAAA,YAAY,MAAZ,EACE,UAAc,cAAA;AAAA,YACb,IAAI;AAAA,YACJ,gBAAgB;AAAA,UACjB,CAAA,GACH;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,IAEA,qBAAC,YAAY,MAAZ,EAAiB,QAAQ,mBAAmB,SAAS,SAAS,MAAM,kBAAkB,IAAI,GACzF,UAAA;AAAA,MAAC,oBAAA,YAAY,OAAZ,EACE,UAAc,cAAA;AAAA,QACb,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACjB,CAAA,GACH;AAAA,MAEC,oBAAA,YAAY,MAAZ,EACE,UAAc,cAAA;AAAA,QACb,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACjB,CAAA,GACH;AAAA,IAAA,GACF;AAAA,EACF,EAAA,CAAA;AAEJ;"}