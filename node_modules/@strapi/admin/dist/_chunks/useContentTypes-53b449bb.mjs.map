{"version":3,"file":"useContentTypes-53b449bb.mjs","sources":["../../admin/src/hooks/useContentTypes.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { useAPIErrorHandler, useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { AxiosError } from 'axios';\nimport { useQueries } from 'react-query';\n\nimport { Component, ContentType } from '../../../shared/schema';\n\nexport function useContentTypes() {\n  const { get } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const queries = useQueries([\n    {\n      queryKey: ['content-manager', 'components'],\n      async queryFn() {\n        const {\n          data: { data },\n        } = await get<{ data: Component[] }>(`/content-manager/components`);\n\n        return data;\n      },\n      onError(error: unknown) {\n        if (error instanceof AxiosError) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        }\n      },\n    },\n\n    {\n      queryKey: ['content-manager', 'content-types'],\n      async queryFn() {\n        const {\n          data: { data },\n        } = await get<{ data: ContentType[] }>(`/content-manager/content-types`);\n\n        return data;\n      },\n      onError(error: unknown) {\n        if (error instanceof AxiosError) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        }\n      },\n    },\n  ]);\n\n  const [components, contentTypes] = queries;\n  const isLoading = components.isLoading || contentTypes.isLoading;\n\n  // the return value needs to be memoized, because intantiating\n  // an empty array as default value would lead to an unstable return\n  // value, which later on triggers infinite loops if used in the\n  // dependency arrays of other hooks\n  const collectionTypes = React.useMemo(() => {\n    return (contentTypes?.data ?? []).filter(\n      (contentType) => contentType.kind === 'collectionType' && contentType.isDisplayed\n    );\n  }, [contentTypes?.data]);\n\n  const singleTypes = React.useMemo(() => {\n    return (contentTypes?.data ?? []).filter(\n      (contentType) => contentType.kind !== 'collectionType' && contentType.isDisplayed\n    );\n  }, [contentTypes?.data]);\n\n  return {\n    isLoading,\n    components: React.useMemo(() => components?.data ?? [], [components?.data]),\n    collectionTypes,\n    singleTypes,\n  };\n}\n"],"names":[],"mappings":";;;;AAQO,SAAS,kBAAkB;AAC1B,QAAA,EAAE,QAAQ;AACV,QAAA,EAAE,mBAAmB;AAC3B,QAAM,qBAAqB;AAC3B,QAAM,UAAU,WAAW;AAAA,IACzB;AAAA,MACE,UAAU,CAAC,mBAAmB,YAAY;AAAA,MAC1C,MAAM,UAAU;AACR,cAAA;AAAA,UACJ,MAAM,EAAE,KAAK;AAAA,QACf,IAAI,MAAM,IAA2B,6BAA6B;AAE3D,eAAA;AAAA,MACT;AAAA,MACA,QAAQ,OAAgB;AACtB,YAAI,iBAAiB,YAAY;AACZ,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,eAAe,KAAK;AAAA,UAAA,CAC9B;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,IAEA;AAAA,MACE,UAAU,CAAC,mBAAmB,eAAe;AAAA,MAC7C,MAAM,UAAU;AACR,cAAA;AAAA,UACJ,MAAM,EAAE,KAAK;AAAA,QACf,IAAI,MAAM,IAA6B,gCAAgC;AAEhE,eAAA;AAAA,MACT;AAAA,MACA,QAAQ,OAAgB;AACtB,YAAI,iBAAiB,YAAY;AACZ,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,eAAe,KAAK;AAAA,UAAA,CAC9B;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EAAA,CACD;AAEK,QAAA,CAAC,YAAY,YAAY,IAAI;AAC7B,QAAA,YAAY,WAAW,aAAa,aAAa;AAMjD,QAAA,kBAAkB,MAAM,QAAQ,MAAM;AAClC,YAAA,cAAc,QAAQ,CAAA,GAAI;AAAA,MAChC,CAAC,gBAAgB,YAAY,SAAS,oBAAoB,YAAY;AAAA,IAAA;AAAA,EACxE,GACC,CAAC,cAAc,IAAI,CAAC;AAEjB,QAAA,cAAc,MAAM,QAAQ,MAAM;AAC9B,YAAA,cAAc,QAAQ,CAAA,GAAI;AAAA,MAChC,CAAC,gBAAgB,YAAY,SAAS,oBAAoB,YAAY;AAAA,IAAA;AAAA,EACxE,GACC,CAAC,cAAc,IAAI,CAAC;AAEhB,SAAA;AAAA,IACL;AAAA,IACA,YAAY,MAAM,QAAQ,MAAM,YAAY,QAAQ,IAAI,CAAC,YAAY,IAAI,CAAC;AAAA,IAC1E;AAAA,IACA;AAAA,EAAA;AAEJ;"}