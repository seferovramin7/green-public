{"version":3,"file":"useAdminRoles-501e111a.mjs","sources":["../../admin/src/hooks/useAdminRoles.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { useCollator, useFetchClient } from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\n\nimport type { FindRole, FindRoles } from '../../../shared/contracts/roles';\n\nexport type APIRolesQueryParams =\n  | FindRole.Request['params']\n  | (FindRoles.Request['query'] & { id?: never });\n\nexport type AdminRole = FindRoles.Response['data'][number];\n\nexport const useAdminRoles = (params: APIRolesQueryParams = {}, queryOptions = {}) => {\n  const { id = '', ...queryParams } = params;\n\n  const { get } = useFetchClient();\n  const { locale } = useIntl();\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n  const { data, error, isError, isLoading, refetch } = useQuery(\n    ['roles', id, queryParams],\n    async () => {\n      /**\n       * TODO: can we infer if it's an array or not based on the appearance of `id`?\n       */\n      const { data } = await get<FindRole.Response | FindRoles.Response>(\n        `/admin/roles/${id ?? ''}`,\n        {\n          params: queryParams,\n        }\n      );\n\n      return data;\n    },\n    queryOptions\n  );\n\n  // the return value needs to be memoized, because intantiating\n  // an empty array as default value would lead to an unstable return\n  // value, which later on triggers infinite loops if used in the\n  // dependency arrays of other hooks\n  const roles = React.useMemo(() => {\n    let roles: FindRoles.Response['data'] = [];\n\n    if (data) {\n      if (Array.isArray(data.data)) {\n        roles = data.data;\n      } else {\n        roles = [data.data];\n      }\n    }\n\n    return [...roles].sort((a, b) => formatter.compare(a.name, b.name));\n  }, [data, formatter]);\n\n  return {\n    roles,\n    error,\n    isError,\n    isLoading,\n    refetch,\n  };\n};\n"],"names":["data","roles"],"mappings":";;;;AAcO,MAAM,gBAAgB,CAAC,SAA8B,IAAI,eAAe,CAAA,MAAO;AACpF,QAAM,EAAE,KAAK,IAAI,GAAG,gBAAgB;AAE9B,QAAA,EAAE,QAAQ;AACV,QAAA,EAAE,WAAW;AACb,QAAA,YAAY,YAAY,QAAQ;AAAA,IACpC,aAAa;AAAA,EAAA,CACd;AACD,QAAM,EAAE,MAAM,OAAO,SAAS,WAAW,YAAY;AAAA,IACnD,CAAC,SAAS,IAAI,WAAW;AAAA,IACzB,YAAY;AAIV,YAAM,EAAE,MAAAA,MAAK,IAAI,MAAM;AAAA,QACrB,gBAAgB,MAAM,EAAE;AAAA,QACxB;AAAA,UACE,QAAQ;AAAA,QACV;AAAA,MAAA;AAGKA,aAAAA;AAAAA,IACT;AAAA,IACA;AAAA,EAAA;AAOI,QAAA,QAAQ,MAAM,QAAQ,MAAM;AAChC,QAAIC,SAAoC,CAAA;AAExC,QAAI,MAAM;AACR,UAAI,MAAM,QAAQ,KAAK,IAAI,GAAG;AAC5BA,iBAAQ,KAAK;AAAA,MAAA,OACR;AACLA,iBAAQ,CAAC,KAAK,IAAI;AAAA,MACpB;AAAA,IACF;AAEA,WAAO,CAAC,GAAGA,MAAK,EAAE,KAAK,CAAC,GAAG,MAAM,UAAU,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC;AAAA,EAAA,GACjE,CAAC,MAAM,SAAS,CAAC;AAEb,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}