{"version":3,"file":"CreatePage-92f708fa.js","sources":["../../admin/src/pages/Settings/pages/Roles/CreatePage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Main,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport {\n  CheckPagePermissions,\n  Form,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useFetchClient,\n  useNotification,\n  useOverlayBlocker,\n  useTracking,\n  translatedErrors,\n} from '@strapi/helper-plugin';\nimport { ArrowLeft } from '@strapi/icons';\nimport { format } from 'date-fns';\nimport { Formik } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { NavLink, useHistory, useRouteMatch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\n\nimport * as PermissonContracts from '../../../../../../shared/contracts/permissions';\nimport { selectAdminPermissions } from '../../../../selectors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\nimport { useAdminRolePermissions } from './hooks/useAdminRolePermissions';\n\n/* -------------------------------------------------------------------------------------------------\n * CreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst CREATE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required),\n  description: yup.string().required(translatedErrors.required),\n});\n\n/**\n * TODO: this whole section of the app needs refactoring. Using a ref to\n * manage the state of the child is nonsensical.\n */\nconst CreatePage = () => {\n  const match = useRouteMatch<{ id: string }>('/settings/roles/duplicate/:id');\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { formatMessage } = useIntl();\n  const [isSubmitting, setIsSubmiting] = React.useState(false);\n  const { replace } = useHistory();\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const { post, put, get } = useFetchClient();\n\n  const id = match?.params.id ?? null;\n\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } = useQuery(\n    ['permissions', id],\n    async () => {\n      const {\n        data: { data },\n      } = await get<PermissonContracts.GetAll.Response>('/admin/permissions', {\n        // TODO: check with BE why we deviate from our usual admin API format here\n        params: { role: id },\n      });\n\n      return data;\n    },\n    {\n      cacheTime: 0,\n    }\n  );\n\n  const { permissions: rolePermissions, isLoading: isLoadingRole } = useAdminRolePermissions(\n    { id },\n    {\n      cacheTime: 0,\n      // only fetch permissions if a role is cloned\n      enabled: !!id,\n    }\n  );\n\n  const handleCreateRoleSubmit = (data: { name: string; description: string }) => {\n    lockApp?.();\n    setIsSubmiting(true);\n\n    if (id) {\n      trackUsage('willDuplicateRole');\n    } else {\n      trackUsage('willCreateNewRole');\n    }\n\n    Promise.resolve(post('/admin/roles', data))\n      .then(async ({ data: res }) => {\n        const { permissionsToSend } = permissionsRef.current?.getPermissions() ?? {};\n\n        if (id) {\n          trackUsage('didDuplicateRole');\n        } else {\n          trackUsage('didCreateNewRole');\n        }\n\n        if (res.data.id && !isEmpty(permissionsToSend)) {\n          await put(`/admin/roles/${res.data.id}/permissions`, { permissions: permissionsToSend });\n        }\n\n        return res;\n      })\n      .then((res) => {\n        setIsSubmiting(false);\n        toggleNotification({\n          type: 'success',\n          message: { id: 'Settings.roles.created', defaultMessage: 'created' },\n        });\n        replace(`/settings/roles/${res.data.id}`);\n      })\n      .catch((err) => {\n        console.error(err);\n        setIsSubmiting(false);\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      })\n      .finally(() => {\n        unlockApp?.();\n      });\n  };\n\n  const defaultDescription = `${formatMessage({\n    id: 'Settings.roles.form.created',\n    defaultMessage: 'Created',\n  })} ${format(new Date(), 'PPP')}`;\n\n  return (\n    <Main>\n      <SettingsPageTitle name=\"Roles\" />\n      <Formik\n        initialValues={{ name: '', description: defaultDescription }}\n        onSubmit={handleCreateRoleSubmit}\n        validationSchema={CREATE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ handleSubmit, values, errors, handleReset, handleChange }) => (\n          <Form>\n            <>\n              <HeaderLayout\n                primaryAction={\n                  <Flex gap={2}>\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => {\n                        handleReset();\n                        permissionsRef.current?.resetForm();\n                      }}\n                      size=\"L\"\n                    >\n                      {formatMessage({\n                        id: 'app.components.Button.reset',\n                        defaultMessage: 'Reset',\n                      })}\n                    </Button>\n                    {/* @ts-expect-error Incompatibility between forimk and our DS */}\n                    <Button onClick={handleSubmit} loading={isSubmitting} size=\"L\">\n                      {formatMessage({\n                        id: 'global.save',\n                        defaultMessage: 'Save',\n                      })}\n                    </Button>\n                  </Flex>\n                }\n                title={formatMessage({\n                  id: 'Settings.roles.create.title',\n                  defaultMessage: 'Create a role',\n                })}\n                subtitle={formatMessage({\n                  id: 'Settings.roles.create.description',\n                  defaultMessage: 'Define the rights given to the role',\n                })}\n                navigationAction={\n                  // @ts-expect-error â€“ the props from the component passed as `as` are not correctly inferred.\n                  <Link as={NavLink} startIcon={<ArrowLeft />} to=\"/settings/roles\">\n                    {formatMessage({\n                      id: 'global.back',\n                      defaultMessage: 'Back',\n                    })}\n                  </Link>\n                }\n              />\n              <ContentLayout>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Flex justifyContent=\"space-between\">\n                        <Box>\n                          <Box>\n                            <Typography fontWeight=\"bold\">\n                              {formatMessage({\n                                id: 'global.details',\n                                defaultMessage: 'Details',\n                              })}\n                            </Typography>\n                          </Box>\n                          <Box>\n                            <Typography variant=\"pi\" textColor=\"neutral600\">\n                              {formatMessage({\n                                id: 'Settings.roles.form.description',\n                                defaultMessage: 'Name and description of the role',\n                              })}\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <UsersRoleNumber>\n                          {formatMessage(\n                            {\n                              id: 'Settings.roles.form.button.users-with-role',\n                              defaultMessage:\n                                '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n                            },\n                            { number: 0 }\n                          )}\n                        </UsersRoleNumber>\n                      </Flex>\n                      <Grid gap={4}>\n                        <GridItem col={6}>\n                          <TextInput\n                            name=\"name\"\n                            error={errors.name && formatMessage({ id: errors.name })}\n                            label={formatMessage({\n                              id: 'global.name',\n                              defaultMessage: 'Name',\n                            })}\n                            onChange={handleChange}\n                            required\n                            value={values.name}\n                          />\n                        </GridItem>\n                        <GridItem col={6}>\n                          <Textarea\n                            label={formatMessage({\n                              id: 'global.description',\n                              defaultMessage: 'Description',\n                            })}\n                            id=\"description\"\n                            error={errors.description && formatMessage({ id: errors.description })}\n                            onChange={handleChange}\n                          >\n                            {values.description}\n                          </Textarea>\n                        </GridItem>\n                      </Grid>\n                    </Flex>\n                  </Box>\n                  {!isLoadingPermissionsLayout && !isLoadingRole && permissionsLayout ? (\n                    <Box shadow=\"filterShadow\" hasRadius>\n                      <Permissions\n                        isFormDisabled={false}\n                        ref={permissionsRef}\n                        permissions={rolePermissions}\n                        layout={permissionsLayout}\n                      />\n                    </Box>\n                  ) : (\n                    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                      <LoadingIndicatorPage />\n                    </Box>\n                  )}\n                </Flex>\n              </ContentLayout>\n            </>\n          </Form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst UsersRoleNumber = styled.div`\n  border: 1px solid ${({ theme }) => theme.colors.primary200};\n  background: ${({ theme }) => theme.colors.primary100};\n  padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[4]}`};\n  color: ${({ theme }) => theme.colors.primary600};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  font-size: ${12 / 16}rem;\n  font-weight: bold;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedCreatePage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedCreatePage = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.roles.create}>\n      <CreatePage />\n    </CheckPagePermissions>\n  );\n};\n\nexport { CreatePage, ProtectedCreatePage };\n"],"names":["yup","translatedErrors","useRouteMatch","useNotification","useOverlayBlocker","useIntl","React","useHistory","useTracking","useFetchClient","useQuery","useAdminRolePermissions","isEmpty","format","Main","jsx","SettingsPageTitle","Formik","Form","jsxs","Fragment","HeaderLayout","Flex","Button","Link","NavLink","ArrowLeft","ContentLayout","Box","Typography","Grid","GridItem","TextInput","Textarea","Permissions","LoadingIndicatorPage","styled","useSelector","selectAdminPermissions","CheckPagePermissions"],"mappings":"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"}