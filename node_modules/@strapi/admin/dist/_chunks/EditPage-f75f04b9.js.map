{"version":3,"file":"EditPage-f75f04b9.js","sources":["../../admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx","../../admin/src/pages/Settings/pages/Roles/EditPage.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  GridItem,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { FormikProps } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\nimport type { EditPageFormValues } from '../EditPage';\n\ninterface RoleFormProps extends Pick<FormikProps<EditPageFormValues>, 'values' | 'errors'> {\n  onBlur: FormikProps<EditPageFormValues>['handleBlur'];\n  onChange: FormikProps<EditPageFormValues>['handleChange'];\n  disabled?: boolean;\n  role: AdminRole;\n}\n\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex justifyContent=\"space-between\">\n          <Box>\n            <Box>\n              <Typography fontWeight=\"bold\">\n                {role\n                  ? role.name\n                  : formatMessage({\n                      id: 'global.details',\n                      defaultMessage: 'Details',\n                    })}\n              </Typography>\n            </Box>\n            <Box>\n              <Typography textColor=\"neutral500\" variant=\"pi\">\n                {role\n                  ? role.description\n                  : formatMessage({\n                      id: 'Settings.roles.form.description',\n                      defaultMessage: 'Name and description of the role',\n                    })}\n              </Typography>\n            </Box>\n          </Box>\n          <Button disabled variant=\"secondary\">\n            {formatMessage(\n              {\n                id: 'Settings.roles.form.button.users-with-role',\n                defaultMessage:\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n              },\n              { number: role.usersCount }\n            )}\n          </Button>\n        </Flex>\n        <Grid gap={4}>\n          <GridItem col={6}>\n            <TextInput\n              disabled={disabled}\n              name=\"name\"\n              error={errors.name && formatMessage({ id: errors.name })}\n              label={formatMessage({\n                id: 'global.name',\n                defaultMessage: 'Name',\n              })}\n              onChange={onChange}\n              onBlur={onBlur}\n              required\n              value={values.name || ''}\n            />\n          </GridItem>\n          <GridItem col={6}>\n            <Textarea\n              disabled={disabled}\n              label={formatMessage({\n                id: 'global.description',\n                defaultMessage: 'Description',\n              })}\n              id=\"description\"\n              error={errors.name && formatMessage({ id: errors.name })}\n              onChange={onChange}\n              onBlur={onBlur}\n            >\n              {values.description || ''}\n            </Textarea>\n          </GridItem>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { RoleForm };\nexport type { RoleFormProps };\n","import * as React from 'react';\n\nimport { Box, Button, ContentLayout, Flex, HeaderLayout, Main } from '@strapi/design-system';\nimport { Link } from '@strapi/design-system/v2';\nimport {\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useNotification,\n  useOverlayBlocker,\n  useTracking,\n  translatedErrors,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { ArrowLeft } from '@strapi/icons';\nimport { AxiosError } from 'axios';\nimport { Formik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\nimport { NavLink, Redirect, useRouteMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport * as PermissonContracts from '../../../../../../shared/contracts/permissions';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\nimport { selectAdminPermissions } from '../../../../selectors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\nimport { RoleForm } from './components/RoleForm';\nimport { useAdminRolePermissions } from './hooks/useAdminRolePermissions';\n\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required),\n});\n\ninterface EditPageFormValues {\n  name: string;\n  description: string;\n}\n\nconst EditPage = () => {\n  const toggleNotification = useNotification();\n  const { formatMessage } = useIntl();\n  const match = useRouteMatch<{ id: string }>('/settings/roles/:id');\n  const id = match?.params.id;\n  const { put, get } = useFetchClient();\n  const [isSubmitting, setIsSubmiting] = React.useState(false);\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const { trackUsage } = useTracking();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } = useQuery(\n    ['permissions', id],\n    async () => {\n      const {\n        data: { data },\n      } = await get<PermissonContracts.GetAll.Response>('/admin/permissions', {\n        // TODO: check with BE why we deviate from our usual admin API format here\n        params: { role: id },\n      });\n\n      return data;\n    },\n    {\n      cacheTime: 0,\n    }\n  );\n\n  const {\n    roles,\n    isLoading: isRoleLoading,\n    refetch: refetchRole,\n  } = useAdminRoles(\n    { id },\n    {\n      cacheTime: 0,\n    }\n  );\n\n  const role = roles[0] ?? {};\n\n  const { permissions, isLoading: isLoadingPermissions } = useAdminRolePermissions(\n    { id: id ?? null },\n    {\n      cacheTime: 0,\n    }\n  );\n\n  // TODO: this should use a react-query mutation\n  const handleEditRoleSubmit = async (data: { name: string; description: string }) => {\n    try {\n      lockApp?.();\n      setIsSubmiting(true);\n\n      const { permissionsToSend, didUpdateConditions } =\n        permissionsRef.current?.getPermissions() ?? {};\n\n      await put(`/admin/roles/${id}`, data);\n\n      if (role.code !== 'strapi-super-admin') {\n        await put(`/admin/roles/${id}/permissions`, {\n          permissions: permissionsToSend,\n        });\n\n        if (didUpdateConditions) {\n          trackUsage('didUpdateConditions');\n        }\n      }\n\n      permissionsRef.current?.setFormAfterSubmit();\n\n      await refetchRole();\n\n      toggleNotification({\n        type: 'success',\n        message: { id: 'notification.success.saved' },\n      });\n    } catch (error) {\n      if (error instanceof AxiosError) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n      }\n    } finally {\n      setIsSubmiting(false);\n      unlockApp?.();\n    }\n  };\n\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\n\n  return (\n    <Main>\n      <SettingsPageTitle name=\"Roles\" />\n      <Formik\n        enableReinitialize\n        initialValues={{\n          name: role.name ?? '',\n          description: role.description ?? '',\n        }}\n        onSubmit={handleEditRoleSubmit}\n        validationSchema={EDIT_ROLE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ handleSubmit, values, errors, handleChange, handleBlur }) => (\n          <form onSubmit={handleSubmit}>\n            <HeaderLayout\n              primaryAction={\n                <Flex gap={2}>\n                  <Button\n                    type=\"submit\"\n                    disabled={role.code === 'strapi-super-admin'}\n                    // @ts-expect-error –  Incompatibility between forimk and our DS\n                    onClick={handleSubmit}\n                    loading={isSubmitting}\n                    size=\"L\"\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                </Flex>\n              }\n              title={formatMessage({\n                id: 'Settings.roles.edit.title',\n                defaultMessage: 'Edit a role',\n              })}\n              subtitle={formatMessage({\n                id: 'Settings.roles.create.description',\n                defaultMessage: 'Define the rights given to the role',\n              })}\n              navigationAction={\n                // @ts-expect-error – the props from the component passed as `as` are not correctly inferred.\n                <Link as={NavLink} startIcon={<ArrowLeft />} to=\"/settings/roles\">\n                  {formatMessage({\n                    id: 'global.back',\n                    defaultMessage: 'Back',\n                  })}\n                </Link>\n              }\n            />\n            <ContentLayout>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <RoleForm\n                  disabled={isFormDisabled}\n                  errors={errors}\n                  values={values}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  role={role}\n                />\n                {!isLoadingPermissionsLayout &&\n                !isRoleLoading &&\n                !isLoadingPermissions &&\n                permissionsLayout ? (\n                  <Box shadow=\"filterShadow\" hasRadius>\n                    <Permissions\n                      isFormDisabled={isFormDisabled}\n                      permissions={permissions}\n                      ref={permissionsRef}\n                      layout={permissionsLayout}\n                    />\n                  </Box>\n                ) : (\n                  <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                    <LoadingIndicatorPage />\n                  </Box>\n                )}\n              </Flex>\n            </ContentLayout>\n          </form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  const {\n    isLoading,\n    allowedActions: { canRead, canUpdate },\n  } = useRBAC(permissions.settings?.roles);\n\n  if (isLoading) {\n    return <LoadingIndicatorPage />;\n  }\n\n  if (!canRead && !canUpdate) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <EditPage />;\n};\n\nexport { EditPage, ProtectedEditPage };\nexport type { EditPageFormValues };\n"],"names":["useIntl","Box","Flex","jsxs","jsx","Typography","Button","Grid","GridItem","TextInput","Textarea","yup","translatedErrors","useNotification","useRouteMatch","useFetchClient","React","useOverlayBlocker","useTracking","useAPIErrorHandler","useQuery","useAdminRoles","useAdminRolePermissions","AxiosError","Main","SettingsPageTitle","Formik","HeaderLayout","Link","NavLink","ArrowLeft","ContentLayout","Permissions","LoadingIndicatorPage","useTypedSelector","selectAdminPermissions","useRBAC","Redirect"],"mappings":"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"}