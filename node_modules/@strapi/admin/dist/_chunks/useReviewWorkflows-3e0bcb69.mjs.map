{"version":3,"file":"useReviewWorkflows-3e0bcb69.mjs","sources":["../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/hooks/useReviewWorkflows.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { useFetchClient } from '@strapi/helper-plugin';\nimport { useQuery } from 'react-query';\n\nimport { GetAll, Get } from '../../../../../../../../shared/contracts/review-workflows';\n\nexport type APIReviewWorkflowsQueryParams = Get.Params | (GetAll.Request['query'] & { id?: never });\n\nexport function useReviewWorkflows(params: APIReviewWorkflowsQueryParams = {}) {\n  const { get } = useFetchClient();\n\n  const { id = '', ...queryParams } = params;\n  const defaultQueryParams = {\n    populate: 'stages',\n  };\n\n  const { data, isLoading, status, refetch } = useQuery(\n    ['review-workflows', 'workflows', id],\n    async () => {\n      const { data } = await get<GetAll.Response | Get.Response>(\n        `/admin/review-workflows/workflows/${id}`,\n        {\n          params: { ...defaultQueryParams, ...queryParams },\n        }\n      );\n\n      return data;\n    }\n  );\n\n  // the return value needs to be memoized, because intantiating\n  // an empty array as default value would lead to an unstable return\n  // value, which later on triggers infinite loops if used in the\n  // dependency arrays of other hooks\n  const workflows = React.useMemo(() => {\n    let workflows: GetAll.Response['data'] = [];\n\n    if (data?.data) {\n      if (Array.isArray(data.data)) {\n        workflows = data.data;\n      } else {\n        workflows = [data.data];\n      }\n    }\n\n    return workflows;\n  }, [data]);\n\n  const meta = React.useMemo(() => {\n    let meta: GetAll.Response['meta'];\n\n    if (data && 'meta' in data) {\n      meta = data.meta;\n    }\n\n    return meta;\n  }, [data]);\n\n  return {\n    // meta contains e.g. the total of all workflows. we can not use\n    // the pagination object here, because the list is not paginated.\n    meta,\n    workflows,\n    isLoading,\n    status,\n    refetch,\n  };\n}\n"],"names":["data","workflows","meta"],"mappings":";;;AASgB,SAAA,mBAAmB,SAAwC,IAAI;AACvE,QAAA,EAAE,QAAQ;AAEhB,QAAM,EAAE,KAAK,IAAI,GAAG,gBAAgB;AACpC,QAAM,qBAAqB;AAAA,IACzB,UAAU;AAAA,EAAA;AAGZ,QAAM,EAAE,MAAM,WAAW,QAAQ,QAAY,IAAA;AAAA,IAC3C,CAAC,oBAAoB,aAAa,EAAE;AAAA,IACpC,YAAY;AACV,YAAM,EAAE,MAAAA,MAAK,IAAI,MAAM;AAAA,QACrB,qCAAqC,EAAE;AAAA,QACvC;AAAA,UACE,QAAQ,EAAE,GAAG,oBAAoB,GAAG,YAAY;AAAA,QAClD;AAAA,MAAA;AAGKA,aAAAA;AAAAA,IACT;AAAA,EAAA;AAOI,QAAA,YAAY,MAAM,QAAQ,MAAM;AACpC,QAAIC,aAAqC,CAAA;AAEzC,QAAI,MAAM,MAAM;AACd,UAAI,MAAM,QAAQ,KAAK,IAAI,GAAG;AAC5BA,qBAAY,KAAK;AAAA,MAAA,OACZ;AACLA,qBAAY,CAAC,KAAK,IAAI;AAAA,MACxB;AAAA,IACF;AAEOA,WAAAA;AAAAA,EAAA,GACN,CAAC,IAAI,CAAC;AAEH,QAAA,OAAO,MAAM,QAAQ,MAAM;AAC3BC,QAAAA;AAEA,QAAA,QAAQ,UAAU,MAAM;AAC1BA,cAAO,KAAK;AAAA,IACd;AAEOA,WAAAA;AAAAA,EAAA,GACN,CAAC,IAAI,CAAC;AAEF,SAAA;AAAA;AAAA;AAAA,IAGL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}