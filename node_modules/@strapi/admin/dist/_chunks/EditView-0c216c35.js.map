{"version":3,"file":"EditView-0c216c35.js","sources":["../../admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Main,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  Form,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useGuidedTour,\n  useNotification,\n  useOverlayBlocker,\n  useRBAC,\n  useTracking,\n  translatedErrors,\n} from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { AxiosError, AxiosResponse } from 'axios';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { formatAPIErrors } from '../../../../utils/formatAPIErrors';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { FormHead } from '../../components/Tokens/FormHead';\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\nimport { TokenBox } from '../../components/Tokens/TokenBox';\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\nimport { TokenName } from '../../components/Tokens/TokenName';\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\n\nimport type {\n  TokenCreate,\n  TokenGetById,\n  TransferToken,\n  TokenUpdate,\n  SanitizedTransferToken,\n} from '../../../../../../shared/contracts/transfer';\n\nconst schema = yup.object().shape({\n  name: yup.string().max(100).required(translatedErrors.required),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required),\n  permissions: yup.string().required(translatedErrors.required),\n});\n\nconst MSG_ERROR_NAME_TAKEN = 'Name already taken';\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditView = () => {\n  useFocusWhenNavigate();\n  const { formatMessage } = useIntl();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n  const toggleNotification = useNotification();\n  const history = useHistory();\n  const { state: locationState } = useLocation<{ transferToken: TransferToken }>();\n  const [transferToken, setTransferToken] = React.useState<\n    TransferToken | SanitizedTransferToken | null\n  >(\n    locationState && 'accessKey' in locationState.transferToken\n      ? {\n          ...locationState.transferToken,\n        }\n      : null\n  );\n  const { trackUsage } = useTracking();\n  const { setCurrentStep } = useGuidedTour();\n  const permissions = useSelector(selectAdminPermissions);\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n    // @ts-expect-error this is fine\n  } = useRBAC(permissions.settings['transfer-tokens']);\n  const match = useRouteMatch<{ id: string }>('/settings/transfer-tokens/:id');\n  const { get, post, put } = useFetchClient();\n\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n\n  const { formatAPIError } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  useQuery(\n    ['transfer-token', id],\n    async () => {\n      const {\n        data: { data },\n      } = await get<TokenGetById.Response>(`/admin/transfer/tokens/${id}`);\n\n      setTransferToken({\n        ...data,\n      });\n\n      return data;\n    },\n    {\n      enabled: !isCreating && !transferToken,\n      onError(err) {\n        if (err instanceof AxiosError) {\n          // @ts-expect-error this is fine\n          if (err.response.data.error.details?.code === 'INVALID_TOKEN_SALT') {\n            toggleNotification({\n              type: 'warning',\n              message: {\n                id: 'notification.error.invalid.configuration',\n                defaultMessage:\n                  'You have an invalid configuration, check your server log for more information.',\n              },\n            });\n          } else {\n            toggleNotification({\n              type: 'warning',\n              message: formatAPIError(err),\n            });\n          }\n        }\n      },\n    }\n  );\n\n  const handleSubmit = async (body: FormValues, actions: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n    // @ts-expect-error context assertation\n    lockApp();\n\n    const permissions = body.permissions.split('-');\n\n    const isPermissionsTransferPermission = (\n      permission: string[]\n    ): permission is Array<'push' | 'pull'> => {\n      if (permission.length === 1) {\n        return permission[0] === 'push' || permission[0] === 'pull';\n      }\n\n      return permission[0] === 'push' && permission[1] === 'pull';\n    };\n\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\n    // because String.split returns stringp[]\n    if (isPermissionsTransferPermission(permissions)) {\n      try {\n        let response: TransferToken | SanitizedTransferToken;\n\n        if (isCreating) {\n          const { data } = await post<\n            TokenCreate.Response,\n            AxiosResponse<TokenCreate.Response>,\n            TokenCreate.Request['body']\n          >(`/admin/transfer/tokens`, {\n            ...body,\n            permissions,\n          });\n\n          response = data.data;\n        } else {\n          const { data } = await put<\n            TokenUpdate.Response,\n            AxiosResponse<TokenUpdate.Response>,\n            TokenUpdate.Request['body']\n          >(`/admin/transfer/tokens/${id}`, {\n            name: body.name,\n            description: body.description,\n            permissions,\n          });\n\n          response = data.data;\n        }\n\n        // @ts-expect-error context assertation\n        unlockApp();\n\n        if (isCreating) {\n          history.replace(`/settings/transfer-tokens/${response.id}`, { transferToken: response });\n          setCurrentStep('transferTokens.success');\n        }\n\n        setTransferToken({\n          ...response,\n        });\n\n        toggleNotification({\n          type: 'success',\n          message: isCreating\n            ? formatMessage({\n                id: 'notification.success.transfertokencreated',\n                defaultMessage: 'Transfer Token successfully created',\n              })\n            : formatMessage({\n                id: 'notification.success.transfertokenedited',\n                defaultMessage: 'Transfer Token successfully edited',\n              }),\n        });\n\n        trackUsage(isCreating ? 'didCreateToken' : 'didEditToken', {\n          type: transferToken?.permissions,\n          tokenType: TRANSFER_TOKEN_TYPE,\n        });\n      } catch (err) {\n        if (err instanceof AxiosError) {\n          // @ts-expect-error this is fine\n          const errors = formatAPIErrors(err.response.data);\n          actions.setErrors(errors);\n\n          if (err?.response?.data?.error?.message === MSG_ERROR_NAME_TAKEN) {\n            toggleNotification({\n              type: 'warning',\n              message: err.response.data.message || 'notification.error.tokennamenotunique',\n            });\n          } else if (err?.response?.data?.error?.details?.code === 'INVALID_TOKEN_SALT') {\n            toggleNotification({\n              type: 'warning',\n              message: {\n                id: 'notification.error.invalid.configuration',\n                defaultMessage:\n                  'You have an invalid configuration, check your server log for more information.',\n              },\n            });\n          } else {\n            toggleNotification({\n              type: 'warning',\n              message: err?.response?.data?.message || 'notification.error',\n            });\n          }\n        }\n\n        // @ts-expect-error context assertation\n        unlockApp();\n      }\n    }\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const isLoading = !isCreating && !transferToken;\n\n  if (isLoading) {\n    return <LoadingView />;\n  }\n\n  const handleErrorRegenerate = (err: unknown) => {\n    if (err instanceof AxiosError) {\n      if (err?.response?.data?.error?.details?.code === 'INVALID_TOKEN_SALT') {\n        toggleNotification({\n          type: 'warning',\n          message: {\n            id: 'notification.error.invalid.configuration',\n            defaultMessage:\n              'You have an invalid configuration, check your server log for more information.',\n          },\n        });\n      } else {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(err),\n        });\n      }\n    }\n  };\n\n  return (\n    <Main>\n      <SettingsPageTitle name=\"Transfer Tokens\" />\n      <Formik\n        validationSchema={schema}\n        validateOnChange={false}\n        initialValues={\n          {\n            name: transferToken?.name || '',\n            description: transferToken?.description || '',\n            lifespan: transferToken?.lifespan ?? null,\n            /**\n             * We need to cast the permissions to satisfy the type for `permissions`\n             * in the request body incase we don't have a transferToken and instead\n             * use an empty string.\n             */\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\n          } satisfies FormValues\n        }\n        enableReinitialize\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\n      >\n        {({ errors, handleChange, isSubmitting, values }) => {\n          return (\n            <Form>\n              <FormHead\n                backUrl=\"/settings/transfer-tokens\"\n                title={{\n                  id: 'Settings.transferTokens.createPage.title',\n                  defaultMessage: 'TokenCreate Transfer Token',\n                }}\n                token={transferToken}\n                setToken={setTransferToken}\n                canEditInputs={canEditInputs}\n                canRegenerate={canRegenerate}\n                isSubmitting={isSubmitting}\n                regenerateUrl=\"/admin/transfer/tokens/\"\n                onErrorRegenerate={handleErrorRegenerate}\n              />\n              <ContentLayout>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {transferToken &&\n                    Boolean(transferToken?.name) &&\n                    'accessKey' in transferToken && (\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\n                    )}\n                  <FormTransferTokenContainer\n                    errors={errors}\n                    onChange={handleChange}\n                    canEditInputs={canEditInputs}\n                    isCreating={isCreating}\n                    values={values}\n                    transferToken={transferToken}\n                  />\n                </Flex>\n              </ContentLayout>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditView = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings?.['transfer-tokens'].read}>\n      <EditView />\n    </CheckPagePermissions>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormTransferTokenContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\n  permissions: Extract<TransferToken['permissions'][number], string>;\n}\n\ninterface FormTransferTokenContainerProps {\n  errors: FormikErrors<FormValues>;\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\n  canEditInputs: boolean;\n  values: FormValues;\n  isCreating: boolean;\n  transferToken: Partial<TransferToken> | null;\n}\n\nconst FormTransferTokenContainer = ({\n  errors = {},\n  onChange,\n  canEditInputs,\n  isCreating,\n  values,\n  transferToken = {},\n}: FormTransferTokenContainerProps) => {\n  const { formatMessage } = useIntl();\n\n  const typeOptions = [\n    {\n      value: 'push',\n      label: {\n        id: 'Settings.transferTokens.types.push',\n        defaultMessage: 'Push',\n      },\n    },\n    {\n      value: 'pull',\n      label: {\n        id: 'Settings.transferTokens.types.pull',\n        defaultMessage: 'Pull',\n      },\n    },\n    {\n      value: 'push-pull',\n      label: {\n        id: 'Settings.transferTokens.types.push-pull',\n        defaultMessage: 'Full Access',\n      },\n    },\n  ];\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" as=\"h2\">\n          {formatMessage({\n            id: 'global.details',\n            defaultMessage: 'Details',\n          })}\n        </Typography>\n        <Grid gap={5}>\n          <GridItem key=\"name\" col={6} xs={12}>\n            <TokenName\n              error={errors['name']}\n              value={values['name']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </GridItem>\n          <GridItem key=\"description\" col={6} xs={12}>\n            <TokenDescription\n              error={errors['description']}\n              value={values['description']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </GridItem>\n          <GridItem key=\"lifespan\" col={6} xs={12}>\n            <LifeSpanInput\n              isCreating={isCreating}\n              error={errors['lifespan']}\n              value={values['lifespan']}\n              onChange={onChange}\n              token={transferToken}\n            />\n          </GridItem>\n          <GridItem key=\"permissions\" col={6} xs={12}>\n            <TokenTypeSelect\n              name=\"permissions\"\n              value={values['permissions']}\n              error={errors['permissions']}\n              label={{\n                id: 'Settings.tokens.form.type',\n                defaultMessage: 'Token type',\n              }}\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\n              onChange={(value: string) => {\n                onChange({ target: { name: 'permissions', value } });\n              }}\n              options={typeOptions}\n              canEditInputs={canEditInputs}\n            />\n          </GridItem>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingView\n * -----------------------------------------------------------------------------------------------*/\ninterface LoadingViewProps {\n  transferTokenName?: string;\n}\n\nexport const LoadingView = ({ transferTokenName }: LoadingViewProps) => {\n  const { formatMessage } = useIntl();\n  useFocusWhenNavigate();\n\n  return (\n    <Main aria-busy=\"true\">\n      <SettingsPageTitle name=\"Transfer Tokens\" />\n      <HeaderLayout\n        primaryAction={\n          <Button disabled startIcon={<Check />} type=\"button\" size=\"L\">\n            {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n          </Button>\n        }\n        title={\n          transferTokenName ||\n          formatMessage({\n            id: 'Settings.transferTokens.createPage.title',\n            defaultMessage: 'Create Transfer Token',\n          })\n        }\n      />\n      <ContentLayout>\n        <LoadingIndicatorPage />\n      </ContentLayout>\n    </Main>\n  );\n};\n\nexport { EditView, ProtectedEditView };\n"],"names":["yup","translatedErrors","useFocusWhenNavigate","useIntl","useOverlayBlocker","useNotification","useHistory","useLocation","React","useTracking","useGuidedTour","useSelector","selectAdminPermissions","useRBAC","useRouteMatch","useFetchClient","useAPIErrorHandler","TRANSFER_TOKEN_TYPE","useQuery","AxiosError","permissions","formatAPIErrors","Main","jsx","SettingsPageTitle","Formik","Form","FormHead","ContentLayout","jsxs","Flex","TokenBox","CheckPagePermissions","Box","Typography","Grid","GridItem","TokenName","TokenDescription","LifeSpanInput","TokenTypeSelect","HeaderLayout","Button","Check","LoadingIndicatorPage"],"mappings":"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"}